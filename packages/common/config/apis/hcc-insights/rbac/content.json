{
  "extras": {},
  "openapi": {
    "components": {
      "parameters": {
        "GroupNameFilter": {
          "description": "Parameter for filtering resource by group name using string contains search.",
          "in": "query",
          "name": "group_name",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        "GroupUUIDFilter": {
          "description": "Parameter for filtering resource by group uuid using UUID exact match.",
          "in": "query",
          "name": "group_uuid",
          "required": false,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        },
        "NameFilter": {
          "description": "Parameter for filtering resource by name using string contains search.",
          "in": "query",
          "name": "name",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        "NameMatchCriteria": {
          "description": "Parameter for specifying the matching criteria for an object's name or display_name.",
          "in": "query",
          "name": "name_match",
          "required": false,
          "schema": {
            "enum": [
              "partial",
              "exact"
            ],
            "type": "string"
          }
        },
        "QueryLimit": {
          "description": "Parameter for selecting the amount of data returned.",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 10,
            "maximum": 1000,
            "minimum": 1,
            "type": "integer"
          }
        },
        "QueryOffset": {
          "description": "Parameter for selecting the offset of data.",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "minimum": 0,
            "type": "integer"
          }
        },
        "ScopeFilter": {
          "description": "Parameter for filtering resource by scope.",
          "in": "query",
          "name": "scope",
          "required": false,
          "schema": {
            "default": "org_id",
            "enum": [
              "org_id",
              "principal"
            ],
            "type": "string"
          }
        },
        "SystemFilter": {
          "description": "Parameter for filtering resource by system flag.",
          "in": "query",
          "name": "system",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        }
      },
      "requestBodies": {
        "GroupPrincipalIn": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupPrincipalIn"
              }
            }
          },
          "description": "Principal to add to a group",
          "required": true
        },
        "GroupRoleIn": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRoleIn"
              }
            }
          },
          "description": "Role to add to a group",
          "required": true
        }
      },
      "schemas": {
        "Access": {
          "properties": {
            "permission": {
              "example": "cost-management:*:read",
              "type": "string"
            },
            "resourceDefinitions": {
              "items": {
                "$ref": "#/components/schemas/ResourceDefinition"
              },
              "type": "array"
            }
          },
          "required": [
            "permission",
            "resourceDefinitions"
          ]
        },
        "AccessPagination": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/Access"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "AdditionalGroup": {
          "properties": {
            "description": {
              "example": "GroupA Description",
              "type": "string"
            },
            "name": {
              "example": "GroupA",
              "type": "string"
            },
            "uuid": {
              "example": "234df936-abb4-4238-a1c9-d91fc540c702",
              "type": "string"
            }
          }
        },
        "CrossAccountRequest": {
          "properties": {
            "created": {
              "example": "2019-01-21T17:32:28Z",
              "format": "date-time",
              "type": "string"
            },
            "end_date": {
              "example": "2019-01-21T17:32:28Z",
              "format": "date-time"
            },
            "request_id": {
              "example": "2ad8cac5-336e-44c6-9b16-15ac84224d4b",
              "format": "uuid",
              "type": "string"
            },
            "start_date": {
              "example": "2019-01-21T17:32:28Z",
              "format": "date-time"
            },
            "status": {
              "example": "pending",
              "type": "string"
            },
            "target_account": {
              "example": "12345",
              "type": "string"
            },
            "target_org": {
              "example": "12345",
              "type": "string"
            }
          }
        },
        "CrossAccountRequestByAccount": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CrossAccountRequest"
            },
            {
              "properties": {
                "email": {
                  "example": "test@redhat.com",
                  "type": "string"
                },
                "first_name": {
                  "example": "Jane",
                  "type": "string"
                },
                "last_name": {
                  "example": "Doe",
                  "type": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "CrossAccountRequestByUserId": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CrossAccountRequest"
            },
            {
              "properties": {
                "user_id": {
                  "example": "1234",
                  "type": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "CrossAccountRequestDetail": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/CrossAccountRequestDetailByAccount"
            },
            {
              "$ref": "#/components/schemas/CrossAccountRequestDetailByUseId"
            }
          ]
        },
        "CrossAccountRequestDetailByAccount": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CrossAccountRequestWithRoles"
            },
            {
              "properties": {
                "email": {
                  "example": "email",
                  "format": "string"
                },
                "first_name": {
                  "example": "first_name",
                  "format": "string"
                },
                "last_name": {
                  "example": "last_name",
                  "format": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "CrossAccountRequestDetailByUseId": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CrossAccountRequestWithRoles"
            },
            {
              "properties": {
                "user_id": {
                  "example": "1234",
                  "format": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "CrossAccountRequestIn": {
          "properties": {
            "end_date": {
              "example": "01/01/2021",
              "type": "string"
            },
            "roles": {
              "items": {
                "example": "Role Display Name",
                "type": "string"
              },
              "type": "array"
            },
            "start_date": {
              "example": "01/01/2021",
              "type": "string"
            },
            "target_account": {
              "example": "12345",
              "type": "string"
            },
            "target_org": {
              "example": "12345",
              "type": "string"
            }
          },
          "required": [
            "target_account",
            "target_org",
            "start_date",
            "end_date",
            "roles"
          ]
        },
        "CrossAccountRequestOut": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CrossAccountRequestWithRoles"
            },
            {
              "properties": {
                "user_id": {
                  "example": "1234",
                  "type": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "CrossAccountRequestPagination": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CrossAccountRequestByAccount"
                      },
                      {
                        "$ref": "#/components/schemas/CrossAccountRequestByUserId"
                      }
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "CrossAccountRequestPatch": {
          "properties": {
            "end_date": {
              "example": "01/01/2021",
              "type": "string"
            },
            "roles": {
              "items": {
                "example": "Role Display Name",
                "type": "string"
              },
              "type": "array"
            },
            "start_date": {
              "example": "01/01/2021",
              "type": "string"
            },
            "status": {
              "enum": [
                "pending",
                "approved",
                "expired",
                "cancelled",
                "denied"
              ],
              "type": "string"
            }
          }
        },
        "CrossAccountRequestUpdateIn": {
          "properties": {
            "end_date": {
              "example": "01/01/2021",
              "type": "string"
            },
            "roles": {
              "items": {
                "example": "Role Display Name",
                "type": "string"
              },
              "type": "array"
            },
            "start_date": {
              "example": "01/01/2021",
              "type": "string"
            }
          },
          "required": [
            "start_date",
            "end_date",
            "roles"
          ]
        },
        "CrossAccountRequestWithRoles": {
          "properties": {
            "created": {
              "example": "2019-01-21T17:32:28Z",
              "format": "date-time",
              "type": "string"
            },
            "end_date": {
              "example": "01/01/2021",
              "type": "string"
            },
            "request_id": {
              "example": "2ad8cac5-336e-44c6-9b16-15ac84224d4b",
              "format": "uuid",
              "type": "string"
            },
            "roles": {
              "items": {
                "properties": {
                  "description": {
                    "example": "description",
                    "type": "string"
                  },
                  "display_name": {
                    "example": "display_name",
                    "type": "string"
                  },
                  "permissions": {
                    "items": {
                      "$ref": "#/components/schemas/Permission"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "start_date": {
              "example": "01/01/2021",
              "type": "string"
            },
            "status": {
              "example": "pending",
              "type": "string"
            },
            "target_account": {
              "example": "12345",
              "type": "string"
            },
            "target_org": {
              "example": "12345",
              "type": "string"
            }
          }
        },
        "Error": {
          "properties": {
            "errors": {
              "items": {
                "properties": {
                  "detail": {
                    "example": "Not found.",
                    "type": "string"
                  },
                  "status": {
                    "example": "403",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "errors"
          ]
        },
        "Error403": {
          "properties": {
            "errors": {
              "items": {
                "properties": {
                  "detail": {
                    "example": "You do not have permission to perform this action.",
                    "type": "string"
                  },
                  "source": {
                    "example": "detail",
                    "type": "string"
                  },
                  "status": {
                    "example": "403",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "errors"
          ]
        },
        "ErrorNotFound": {
          "description": "Error structure for the \"Not Found\" responses.",
          "properties": {
            "errors": {
              "items": {
                "properties": {
                  "detail": {
                    "description": "Detail of the error.",
                    "example": "Not found.",
                    "type": "string"
                  },
                  "source": {
                    "description": "Source of the error.",
                    "example": "principals",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of the response",
                    "example": "404",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "errors"
          ]
        },
        "Group": {
          "properties": {
            "description": {
              "example": "A description of GroupA",
              "type": "string"
            },
            "name": {
              "example": "GroupA",
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        },
        "GroupOut": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Group"
            },
            {
              "$ref": "#/components/schemas/UUID"
            },
            {
              "$ref": "#/components/schemas/Timestamped"
            },
            {
              "properties": {
                "admin_default": {
                  "default": false,
                  "type": "boolean"
                },
                "platform_default": {
                  "default": false,
                  "type": "boolean"
                },
                "principalCount": {
                  "minimum": 0,
                  "type": "integer"
                },
                "roleCount": {
                  "minimum": 0,
                  "type": "integer"
                },
                "system": {
                  "default": false,
                  "type": "boolean"
                }
              }
            }
          ]
        },
        "GroupPagination": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/GroupOut"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "GroupPrincipalIn": {
          "properties": {
            "principals": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/PrincipalIn"
                  },
                  {
                    "$ref": "#/components/schemas/ServiceAccountIn"
                  }
                ]
              },
              "type": "array"
            }
          },
          "required": [
            "principals"
          ]
        },
        "GroupRoleIn": {
          "properties": {
            "roles": {
              "items": {
                "example": "94846f2f-cced-474f-b7f3-47e2ec51dd11",
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "roles"
          ]
        },
        "GroupRolesPagination": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/RoleOut"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "GroupWithPrincipals": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Group"
            },
            {
              "$ref": "#/components/schemas/UUID"
            },
            {
              "$ref": "#/components/schemas/Timestamped"
            },
            {
              "properties": {
                "principals": {
                  "items": {
                    "$ref": "#/components/schemas/Principal"
                  },
                  "type": "array"
                }
              },
              "required": [
                "principals"
              ],
              "type": "object"
            }
          ]
        },
        "GroupWithPrincipalsAndRoles": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Group"
            },
            {
              "$ref": "#/components/schemas/UUID"
            },
            {
              "$ref": "#/components/schemas/Timestamped"
            },
            {
              "properties": {
                "principals": {
                  "items": {
                    "$ref": "#/components/schemas/Principal"
                  },
                  "type": "array"
                },
                "roles": {
                  "items": {
                    "$ref": "#/components/schemas/RoleOut"
                  },
                  "type": "array"
                }
              },
              "required": [
                "principals",
                "roles"
              ],
              "type": "object"
            }
          ]
        },
        "ListPagination": {
          "properties": {
            "links": {
              "$ref": "#/components/schemas/PaginationLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/PaginationMeta"
            }
          }
        },
        "PaginationLinks": {
          "properties": {
            "first": {
              "example": "/api/v1/(resources)/?offset=0&limit=10",
              "format": "uri",
              "type": "string"
            },
            "last": {
              "example": "/api/v1/(resources)/?offset=90&limit=10",
              "format": "uri",
              "type": "string"
            },
            "next": {
              "example": "/api/v1/(resources)/?offset=40&limit=10",
              "format": "uri",
              "type": "string"
            },
            "previous": {
              "example": "/api/v1/(resources)/?offset=20&limit=10",
              "format": "uri",
              "type": "string"
            }
          }
        },
        "PaginationMeta": {
          "properties": {
            "count": {
              "example": 30,
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "Permission": {
          "properties": {
            "application": {
              "example": "rbac",
              "type": "string"
            },
            "description": {
              "example": "Describe the usage of permission.",
              "type": "string"
            },
            "permission": {
              "example": "rbac:group:read",
              "type": "string"
            },
            "resource_type": {
              "example": "group",
              "type": "string"
            },
            "verb": {
              "example": "read",
              "type": "string"
            }
          }
        },
        "PermissionOptionsPagination": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "PermissionPagination": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "Policy": {
          "properties": {
            "description": {
              "example": "A description of PolicyA",
              "type": "string"
            },
            "name": {
              "example": "PolicyA",
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        },
        "PolicyExtended": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Policy"
            },
            {
              "$ref": "#/components/schemas/UUID"
            },
            {
              "$ref": "#/components/schemas/Timestamped"
            },
            {
              "properties": {
                "group": {
                  "$ref": "#/components/schemas/GroupOut"
                },
                "roles": {
                  "items": {
                    "$ref": "#/components/schemas/RoleOut"
                  },
                  "type": "array"
                }
              },
              "required": [
                "group",
                "roles"
              ],
              "type": "object"
            }
          ]
        },
        "PolicyIn": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Policy"
            },
            {
              "properties": {
                "group": {
                  "example": "83ee048e-3c1d-43ef-b945-108225ae52f4",
                  "format": "uuid",
                  "type": "string"
                },
                "roles": {
                  "items": {
                    "example": "94846f2f-cced-474f-b7f3-47e2ec51dd11",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "group",
                "roles"
              ],
              "type": "object"
            }
          ]
        },
        "PolicyPagination": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/PolicyExtended"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "Principal": {
          "properties": {
            "email": {
              "example": "smithj@mytechco.com",
              "format": "email",
              "type": "string"
            },
            "external_source_id": {
              "example": "1",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "first_name": {
              "example": "John",
              "type": "string"
            },
            "is_active": {
              "type": "boolean"
            },
            "is_org_admin": {
              "type": "boolean"
            },
            "last_name": {
              "example": "Smith",
              "type": "string"
            },
            "username": {
              "example": "smithj",
              "type": "string"
            }
          },
          "required": [
            "username",
            "email"
          ]
        },
        "PrincipalIn": {
          "properties": {
            "username": {
              "example": "smithj",
              "type": "string"
            }
          },
          "required": [
            "username"
          ]
        },
        "PrincipalMinimal": {
          "properties": {
            "username": {
              "example": "smithj",
              "type": "string"
            }
          },
          "required": [
            "username"
          ]
        },
        "PrincipalOut": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Principal"
            },
            {
              "$ref": "#/components/schemas/UUID"
            }
          ]
        },
        "PrincipalPagination": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Principal"
                      },
                      {
                        "$ref": "#/components/schemas/PrincipalMinimal"
                      }
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "ResourceDefinition": {
          "properties": {
            "attributeFilter": {
              "$ref": "#/components/schemas/ResourceDefinitionFilter"
            }
          },
          "required": [
            "attributeFilter"
          ]
        },
        "ResourceDefinitionFilter": {
          "properties": {
            "key": {
              "example": "cost-management.aws.account",
              "type": "string"
            },
            "operation": {
              "enum": [
                "equal",
                "in"
              ],
              "type": "string"
            },
            "value": {
              "oneOf": [
                {
                  "example": "123456",
                  "nullable": true,
                  "type": "string"
                },
                {
                  "example": [
                    "value1",
                    "value2"
                  ],
                  "items": {
                    "oneOf": [
                      {
                        "example": "value1",
                        "type": "string"
                      }
                    ]
                  },
                  "nullable": true,
                  "type": "array"
                }
              ]
            }
          },
          "required": [
            "key",
            "operation",
            "value"
          ]
        },
        "Role": {
          "properties": {
            "description": {
              "example": "A description of RoleA",
              "type": "string"
            },
            "display_name": {
              "example": "ARoleName",
              "type": "string"
            },
            "name": {
              "example": "RoleA",
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        },
        "RoleIn": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Role"
            },
            {
              "properties": {
                "access": {
                  "items": {
                    "$ref": "#/components/schemas/Access"
                  },
                  "type": "array"
                }
              },
              "required": [
                "access"
              ],
              "type": "object"
            }
          ]
        },
        "RoleOut": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Role"
            },
            {
              "$ref": "#/components/schemas/UUID"
            },
            {
              "$ref": "#/components/schemas/Timestamped"
            },
            {
              "properties": {
                "accessCount": {
                  "minimum": 0,
                  "type": "integer"
                },
                "admin_default": {
                  "default": false,
                  "type": "boolean"
                },
                "applications": {
                  "items": {
                    "example": "catalog",
                    "type": "string"
                  },
                  "type": "array"
                },
                "external_role_id": {
                  "example": "ExternalRoleId",
                  "type": "string"
                },
                "external_tenant": {
                  "example": "ExternalTenant",
                  "type": "string"
                },
                "platform_default": {
                  "default": false,
                  "type": "boolean"
                },
                "policyCount": {
                  "minimum": 0,
                  "type": "integer"
                },
                "system": {
                  "default": false,
                  "type": "boolean"
                }
              }
            }
          ]
        },
        "RoleOutDynamic": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Role"
            },
            {
              "$ref": "#/components/schemas/UUID"
            },
            {
              "$ref": "#/components/schemas/Timestamped"
            },
            {
              "properties": {
                "access": {
                  "items": {
                    "$ref": "#/components/schemas/Access"
                  },
                  "type": "array"
                },
                "accessCount": {
                  "minimum": 0,
                  "type": "integer"
                },
                "admin_default": {
                  "default": false,
                  "type": "boolean"
                },
                "applications": {
                  "items": {
                    "example": "catalog",
                    "type": "string"
                  },
                  "type": "array"
                },
                "external_role_id": {
                  "example": "ExternalRoleId",
                  "type": "string"
                },
                "external_tenant": {
                  "example": "ExternalTenant",
                  "type": "string"
                },
                "groups_in": {
                  "items": {
                    "$ref": "#/components/schemas/AdditionalGroup"
                  },
                  "type": "array"
                },
                "groups_in_count": {
                  "minimum": 0,
                  "type": "integer"
                },
                "platform_default": {
                  "default": false,
                  "type": "boolean"
                },
                "policyCount": {
                  "minimum": 0,
                  "type": "integer"
                },
                "system": {
                  "default": false,
                  "type": "boolean"
                }
              },
              "required": [
                "policyCount",
                "accessCount",
                "applications",
                "system",
                "platform_default",
                "admin_default"
              ],
              "type": "object"
            }
          ]
        },
        "RolePagination": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/RoleOut"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "RolePaginationDynamic": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/RoleOutDynamic"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "RolePatch": {
          "properties": {
            "description": {
              "example": "A description of RoleA",
              "type": "string"
            },
            "display_name": {
              "example": "ARoleName",
              "type": "string"
            },
            "name": {
              "example": "RoleA",
              "type": "string"
            }
          }
        },
        "RolePut": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RolePatch"
            },
            {
              "properties": {
                "access": {
                  "description": "List of access permissions. This array can be empty.",
                  "items": {
                    "$ref": "#/components/schemas/Access"
                  },
                  "type": "array"
                }
              },
              "required": [
                "access"
              ],
              "type": "object"
            }
          ]
        },
        "RoleWithAccess": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RoleOut"
            },
            {
              "properties": {
                "access": {
                  "items": {
                    "$ref": "#/components/schemas/Access"
                  },
                  "type": "array"
                }
              },
              "required": [
                "access"
              ],
              "type": "object"
            }
          ]
        },
        "ServiceAccount": {
          "properties": {
            "clientId": {
              "example": "fe593ba0-9c62-013c-1dc2-6aa2427b506a",
              "type": "string"
            },
            "description": {
              "example": "My new shiny Service Account",
              "type": "string"
            },
            "name": {
              "example": "MyServiceAccount",
              "type": "string"
            },
            "owner": {
              "example": "smithj",
              "type": "string"
            },
            "time_created": {
              "example": 1706100532,
              "type": "integer"
            },
            "type": {
              "enum": [
                "service-account"
              ],
              "type": "string"
            },
            "username": {
              "example": "service-account-fe593ba0-9c62-013c-1dc2-6aa2427b506a",
              "type": "string"
            }
          },
          "required": [
            "clientId",
            "username",
            "type"
          ]
        },
        "ServiceAccountIn": {
          "properties": {
            "clientId": {
              "example": "fe593ba0-9c62-013c-1dc2-6aa2427b506a",
              "type": "string"
            },
            "type": {
              "enum": [
                "service-account"
              ],
              "type": "string"
            }
          },
          "required": [
            "type",
            "clientId"
          ]
        },
        "ServiceAccountInGroupResponse": {
          "properties": {
            "data": {
              "additionalProperties": {
                "description": "The response is a map of the form \"UUID\": (true|false)",
                "type": "boolean"
              },
              "description": "Object which indicates whether the given service account UUIDs in the query parameter are present in the specified group or not",
              "example": {
                "3e728bb0-b167-013c-c455-6aa2427b506c": false,
                "dd946f24-cfda-11ee-acb6-7b2702ff4dc8": true
              },
              "type": "object"
            },
            "links": {
              "description": "The links object for this particular response will be empty, since there is no pagination available for the query parameter",
              "example": {},
              "type": "object"
            },
            "meta": {
              "$ref": "#/components/schemas/PaginationMeta"
            }
          }
        },
        "ServiceAccountPagination": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ListPagination"
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/ServiceAccount"
                  },
                  "type": "array"
                }
              },
              "required": [
                "data"
              ],
              "type": "object"
            }
          ]
        },
        "Status": {
          "properties": {
            "api_version": {
              "example": 1,
              "format": "int64",
              "type": "integer"
            },
            "commit": {
              "example": "178d2ea",
              "type": "string"
            }
          },
          "required": [
            "api_version"
          ]
        },
        "Timestamped": {
          "properties": {
            "created": {
              "example": "2019-01-21T17:32:28Z",
              "format": "date-time",
              "type": "string"
            },
            "modified": {
              "example": "2019-03-04T07:25:58Z",
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "created",
            "modified"
          ],
          "type": "object"
        },
        "UUID": {
          "properties": {
            "uuid": {
              "example": "57e60f90-8c0c-4bd1-87a0-2143759aae1c",
              "format": "uuid",
              "type": "string"
            }
          },
          "required": [
            "uuid"
          ],
          "type": "object"
        }
      },
      "securitySchemes": {
        "basic_auth": {
          "description": "The userid/password is needed when accessing this API externally",
          "scheme": "basic",
          "type": "http"
        }
      }
    },
    "info": {
      "description": "The API for Role Based Access Control.",
      "license": {
        "name": "AGPL-3.0",
        "url": "https://opensource.org/licenses/AGPL-3.0"
      },
      "title": "Role Based Access Control",
      "version": "1.0.0"
    },
    "openapi": "3.0.0",
    "paths": {
      "/access/": {
        "get": {
          "description": "Access responses are sorted in ascending order by an ID internal to the database",
          "operationId": "getPrincipalAccess",
          "parameters": [
            {
              "allowEmptyValue": true,
              "description": "The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.",
              "in": "query",
              "name": "application",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).",
              "in": "query",
              "name": "username",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Parameter for ordering roles by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-application",
              "in": "query",
              "name": "order_by",
              "required": false,
              "schema": {
                "enum": [
                  "application",
                  "resource_type",
                  "verb"
                ],
                "type": "string"
              }
            },
            {
              "description": "Set the status of users to get back.",
              "in": "query",
              "name": "status",
              "required": false,
              "schema": {
                "default": "enabled",
                "enum": [
                  "enabled",
                  "disabled",
                  "all"
                ],
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessPagination"
                  }
                }
              },
              "description": "A paginated list of access objects"
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Get the permitted access for a principal in the tenant (defaults to principal from the identity header)",
          "tags": [
            "Access"
          ]
        }
      },
      "/cross-account-requests/": {
        "get": {
          "description": "By default, responses are sorted in ascending order by created_at",
          "operationId": "listCrossAccountRequests",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "description": "Parameter for filtering resource by either a user's ID, or a client's org. The default value is target_org.",
              "in": "query",
              "name": "query_by",
              "required": false,
              "schema": {
                "enum": [
                  "user_id",
                  "target_org"
                ],
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering resource by an account number. Value can be a comma-separated list of ids. To be used in tandem with ?query_by=user_id to further filter a user's requests by account number.",
              "in": "query",
              "name": "account",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering resource by an org id. Value can be a comma-separated list of ids. To be used in tandem with ?query_by=user_id to further filter a user's requests by org id.",
              "in": "query",
              "name": "org_id",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering resource which have been approved.",
              "in": "query",
              "name": "approved_only",
              "required": false,
              "schema": {
                "enum": [
                  "true"
                ],
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering resource based on status.",
              "in": "query",
              "name": "status",
              "required": false,
              "schema": {
                "enum": [
                  "pending",
                  "approved",
                  "denied",
                  "cancelled",
                  "expired"
                ],
                "type": "string"
              }
            },
            {
              "description": "Parameter for ordering by field. For inverse ordering, use '-', e.g. ?order_by=-start_date.",
              "in": "query",
              "name": "order_by",
              "required": false,
              "schema": {
                "enum": [
                  "request_id",
                  "start_date",
                  "end_date",
                  "created",
                  "modified",
                  "status"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CrossAccountRequestPagination"
                  }
                }
              },
              "description": "A paginated list of cross account request objects"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to list cross account requests"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "List the cross account requests for a user or account",
          "tags": [
            "CrossAccountRequest"
          ]
        },
        "post": {
          "operationId": "createCrossAccountRequests",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossAccountRequestIn"
                }
              }
            },
            "description": "CrossAccountRequest to create",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CrossAccountRequestOut"
                  }
                }
              },
              "description": "An object describing the cross account request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to create cross account request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Create a cross account request",
          "tags": [
            "CrossAccountRequest"
          ]
        }
      },
      "/cross-account-requests/{uuid}/": {
        "get": {
          "operationId": "getCrossAccountRequest",
          "parameters": [
            {
              "description": "ID of cross account request to get",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering resource by either a user's ID, or a client's org. The default value is target_org.",
              "in": "query",
              "name": "query_by",
              "required": false,
              "schema": {
                "enum": [
                  "user_id",
                  "target_org"
                ],
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering resource by an account number. Value can be a comma-separated list of ids. To be used in tandem with ?query_by=user_id to further filter a user's requests by account number.",
              "in": "query",
              "name": "account",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering resource which have been approved.",
              "in": "query",
              "name": "approved_only",
              "required": false,
              "schema": {
                "enum": [
                  "true"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CrossAccountRequestDetail"
                  }
                }
              },
              "description": "A cross account request object"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to get group"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Get a cross account request",
          "tags": [
            "CrossAccountRequest"
          ]
        },
        "patch": {
          "description": "Patch the start_date/end_date/roles of an existing request. Could be used by TAM requestor to cancel request or target account admin to approve/deny request.",
          "operationId": "patchCrossAccountRequest",
          "parameters": [
            {
              "description": "ID of cross account request to get",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossAccountRequestPatch"
                }
              }
            },
            "description": "Updates to CrossAccountRequest",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CrossAccountRequestDetail"
                  }
                }
              },
              "description": "A cross account request object"
            },
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CrossAccountRequestOut"
                  }
                }
              },
              "description": "An object describing the cross account request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to get group"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Patch a cross account request",
          "tags": [
            "CrossAccountRequest"
          ]
        },
        "put": {
          "description": "For TAM requestor to update the start_date/end_date/roles of an existing cross account request.",
          "operationId": "putCrossAccountRequest",
          "parameters": [
            {
              "description": "ID of cross account request to get",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossAccountRequestUpdateIn"
                }
              }
            },
            "description": "Updates to CrossAccountRequest",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CrossAccountRequestDetail"
                  }
                }
              },
              "description": "A cross account request object"
            },
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CrossAccountRequestOut"
                  }
                }
              },
              "description": "An object describing the cross account request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to get group"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Update a cross account request",
          "tags": [
            "CrossAccountRequest"
          ]
        }
      },
      "/groups/": {
        "get": {
          "description": "By default, responses are sorted in ascending order by group name",
          "operationId": "listGroups",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/NameFilter"
            },
            {
              "$ref": "#/components/parameters/NameMatchCriteria"
            },
            {
              "$ref": "#/components/parameters/ScopeFilter"
            },
            {
              "description": "A username for a principal to filter for groups",
              "in": "query",
              "name": "username",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A username for a principal to filter for groups where principal is not a member and can be added manually",
              "in": "query",
              "name": "exclude_username",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of UUIDs to filter listed groups.",
              "explode": false,
              "in": "query",
              "name": "uuid",
              "required": false,
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "List of role name to filter for groups. It is exact match but case-insensitive",
              "explode": false,
              "in": "query",
              "name": "role_names",
              "required": false,
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Discriminator that works with role_names to indicate matching all/any of the role names",
              "in": "query",
              "name": "role_discriminator",
              "required": false,
              "schema": {
                "enum": [
                  "all",
                  "any"
                ],
                "type": "string"
              }
            },
            {
              "description": "Parameter for ordering groups by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-name",
              "in": "query",
              "name": "order_by",
              "required": false,
              "schema": {
                "enum": [
                  "name",
                  "modified",
                  "principalCount",
                  "policyCount"
                ],
                "type": "string"
              }
            },
            {
              "description": "An optional flag to return either platform default or non-platform default groups.",
              "in": "query",
              "name": "platform_default",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "An optional flag to return either admin default or non-admin default groups.",
              "in": "query",
              "name": "admin_default",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "An optional flag to return either system or non-system groups.",
              "in": "query",
              "name": "system",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupPagination"
                  }
                }
              },
              "description": "A paginated list of group objects"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to list groups"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "List the groups for a tenant",
          "tags": [
            "Group"
          ]
        },
        "post": {
          "operationId": "createGroup",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Group to create in tenant",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupOut"
                  }
                }
              },
              "description": "An object describing the group"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to create group"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Create a group in a tenant",
          "tags": [
            "Group"
          ]
        }
      },
      "/groups/{uuid}/": {
        "delete": {
          "operationId": "deleteGroup",
          "parameters": [
            {
              "description": "ID of group to delete",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Group deleted"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to delete group"
            },
            "404": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Delete a group in the tenant",
          "tags": [
            "Group"
          ]
        },
        "get": {
          "operationId": "getGroup",
          "parameters": [
            {
              "description": "ID of group to get",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupWithPrincipalsAndRoles"
                  }
                }
              },
              "description": "A group object"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to get group"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Get a group in the tenant",
          "tags": [
            "Group"
          ]
        },
        "put": {
          "operationId": "updateGroup",
          "parameters": [
            {
              "description": "ID of group to update",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Group to update in tenant",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupOut"
                  }
                }
              },
              "description": "Group updated"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to update group"
            },
            "404": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Update a group in the tenant",
          "tags": [
            "Group"
          ]
        }
      },
      "/groups/{uuid}/principals/": {
        "delete": {
          "operationId": "deletePrincipalFromGroup",
          "parameters": [
            {
              "description": "ID of group to update",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A comma separated list of usernames for principals to remove from the group",
              "in": "query",
              "name": "usernames",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A comma separated list of client IDs for service accounts to remove from the group",
              "in": "query",
              "name": "service-accounts",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Principals removed from group"
            },
            "400": {
              "description": "Bad Input"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to remove principals from group"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorNotFound"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Remove a principal from a group in the tenant",
          "tags": [
            "Group"
          ]
        },
        "get": {
          "description": "By default, responses are sorted in ascending order by username",
          "operationId": "getPrincipalsFromGroup",
          "parameters": [
            {
              "description": "ID of group from which to get principals",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Get only admin users within an account.",
              "in": "query",
              "name": "admin_only",
              "required": false,
              "schema": {
                "default": false,
                "enum": [
                  true,
                  false
                ],
                "type": "boolean"
              }
            },
            {
              "description": "Parameter for filtering group principals by principal `username` using string contains search.",
              "in": "query",
              "name": "principal_username",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "description": "Parameter for ordering principals by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-username",
              "in": "query",
              "name": "order_by",
              "required": false,
              "schema": {
                "enum": [
                  "username"
                ],
                "type": "string"
              }
            },
            {
              "description": "Parameter for optionally returning only usernames for principals, bypassing a call to IT.",
              "in": "query",
              "name": "username_only",
              "required": false,
              "schema": {
                "enum": [
                  true,
                  false
                ],
                "type": "boolean"
              }
            },
            {
              "description": "Parameter for selecting the type of principal to be returned.",
              "in": "query",
              "name": "principal_type",
              "required": false,
              "schema": {
                "enum": [
                  "service-account",
                  "user"
                ],
                "type": "string"
              }
            },
            {
              "description": "By specifying a comma separated list of client IDs with this query parameter, RBAC will return an object with the specified client ID and it's matching boolean value to flag whether the client ID is present in the group or not. This query parameter cannot be used along with any other query parameter.",
              "in": "query",
              "name": "service_account_client_ids",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering the service accounts by their description.",
              "in": "query",
              "name": "service_account_description",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering the service accounts by their name.",
              "in": "query",
              "name": "service_account_name",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PrincipalPagination"
                      },
                      {
                        "$ref": "#/components/schemas/ServiceAccountPagination"
                      },
                      {
                        "$ref": "#/components/schemas/ServiceAccountInGroupResponse"
                      }
                    ]
                  }
                }
              },
              "description": "List of principals attached to group"
            },
            "400": {
              "description": "Bad Input"
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Get a list of principals from a group in the tenant",
          "tags": [
            "Group"
          ]
        },
        "post": {
          "operationId": "addPrincipalToGroup",
          "parameters": [
            {
              "description": "ID of group to update",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/GroupPrincipalIn"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupWithPrincipalsAndRoles"
                  }
                }
              },
              "description": "Group updated"
            },
            "400": {
              "description": "Bad Input"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to update principals in group"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorNotFound"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Add a principal to a group in the tenant",
          "tags": [
            "Group"
          ]
        }
      },
      "/groups/{uuid}/roles/": {
        "delete": {
          "operationId": "deleteRoleFromGroup",
          "parameters": [
            {
              "description": "ID of group to update",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A comma separated list of role UUIDs for roles to remove from the group",
              "in": "query",
              "name": "roles",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Roles removed from group"
            },
            "400": {
              "description": "Bad Input"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to remove roles from group"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Remove a role from a group in the tenant",
          "tags": [
            "Group"
          ]
        },
        "get": {
          "description": "By default, responses are sorted in ascending order by role name",
          "operationId": "listRolesForGroup",
          "parameters": [
            {
              "description": "ID of group",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "If this is set to true, the result would be roles excluding the ones in the group",
              "in": "query",
              "name": "exclude",
              "required": false,
              "schema": {
                "default": false,
                "type": "boolean"
              }
            },
            {
              "description": "Parameter for filtering group roles by role `name` using string contains search.",
              "in": "query",
              "name": "role_name",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering group roles by role `display_name` using string contains search.",
              "in": "query",
              "name": "role_display_name",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering group roles by role `description` using string contains search.",
              "in": "query",
              "name": "role_description",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering group roles by system flag.",
              "in": "query",
              "name": "role_system",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Parameter for filtering group roles by role `external_tenant` using string search.",
              "in": "query",
              "name": "role_external_tenant",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "description": "Parameter for ordering roles by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-name",
              "in": "query",
              "name": "order_by",
              "required": false,
              "schema": {
                "enum": [
                  "name",
                  "display_name",
                  "modified",
                  "policyCount"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupRolesPagination"
                  }
                }
              },
              "description": "A list of roles for a group"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to list roles for group"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "List the roles for a group in the tenant",
          "tags": [
            "Group"
          ]
        },
        "post": {
          "operationId": "addRoleToGroup",
          "parameters": [
            {
              "description": "ID of group to update",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/GroupRoleIn"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "data": {
                        "items": {
                          "$ref": "#/components/schemas/RoleOut"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                }
              },
              "description": "Group updated"
            },
            "400": {
              "description": "Bad Input"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to update roles for group"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Add a role to a group in the tenant",
          "tags": [
            "Group"
          ]
        }
      },
      "/permissions/": {
        "get": {
          "description": "By default, responses are sorted in ascending order by permission application.",
          "operationId": "listPermissions",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "description": "Parameter for ordering permissions by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-application",
              "in": "query",
              "name": "order_by",
              "required": false,
              "schema": {
                "enum": [
                  "application",
                  "resource_type",
                  "verb",
                  "permission"
                ],
                "type": "string"
              }
            },
            {
              "description": "Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.",
              "in": "query",
              "name": "application",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.",
              "in": "query",
              "name": "resource_type",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.",
              "in": "query",
              "name": "verb",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Partial match for the aggregate permission value name of a permission object.",
              "in": "query",
              "name": "permission",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "If set to 'true', this will exclude any permission with a global allowance on either 'application', 'resource_type' or 'verb'. The default is 'false'.",
              "in": "query",
              "name": "exclude_globals",
              "required": false,
              "schema": {
                "default": "false",
                "enum": [
                  "true",
                  "false"
                ],
                "type": "string"
              }
            },
            {
              "description": "An optional string filter which accepts one or more role UUIDs, comma-separated, to return permissions not associated with the supplied role(s).",
              "in": "query",
              "name": "exclude_roles",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "If set to 'true', this will exclude any permission with a role where the 'application' is not in the role create allow list.",
              "in": "query",
              "name": "allowed_only",
              "required": false,
              "schema": {
                "default": "false",
                "enum": [
                  "true",
                  "false"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PermissionPagination"
                  }
                }
              },
              "description": "A paginated list of permission objects"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to list permissions"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "List the permissions for a tenant",
          "tags": [
            "Permission"
          ]
        }
      },
      "/permissions/options/": {
        "get": {
          "description": "By default, options of application is returned. And could be resource_type or verb on demand.",
          "operationId": "listPermissionOptions",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "description": "specify which fields of permission to display",
              "in": "query",
              "name": "field",
              "required": true,
              "schema": {
                "enum": [
                  "application",
                  "resource_type",
                  "verb"
                ],
                "type": "string"
              }
            },
            {
              "description": "Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.",
              "in": "query",
              "name": "application",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.",
              "in": "query",
              "name": "resource_type",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.",
              "in": "query",
              "name": "verb",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "If set to 'true', this will exclude any permission option with a global allowance on the supplied '?field=' value of 'application', 'resource_type' or 'verb'. The default is 'false'.",
              "in": "query",
              "name": "exclude_globals",
              "required": false,
              "schema": {
                "default": "false",
                "enum": [
                  "true",
                  "false"
                ],
                "type": "string"
              }
            },
            {
              "description": "If set to 'true', this will exclude any permission with a role where the 'application' is not in the role create allow list.",
              "in": "query",
              "name": "allowed_only",
              "required": false,
              "schema": {
                "default": "false",
                "enum": [
                  "true",
                  "false"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PermissionOptionsPagination"
                  }
                }
              },
              "description": "A list of options for field of permission"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to list permissions"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "List the available options for fields of permissions for a tenant",
          "tags": [
            "Permission"
          ]
        }
      },
      "/principals/": {
        "get": {
          "description": "By default, responses are sorted in ascending order by username",
          "operationId": "listPrincipals",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "description": "Parameter for specifying the matching criteria for an object's name and/or email. Currently, match_criteria of partial searches for a username/email using \"starts with\" pattern.",
              "in": "query",
              "name": "match_criteria",
              "required": false,
              "schema": {
                "default": "exact",
                "enum": [
                  "partial",
                  "exact"
                ],
                "type": "string"
              }
            },
            {
              "description": "Comma separated usernames of principals to get. If match_criteria is specified, only the first username will be picked up for search.",
              "in": "query",
              "name": "usernames",
              "required": false,
              "schema": {
                "example": "userA,userB",
                "type": "string"
              }
            },
            {
              "description": "The sort order of the query, either ascending or descending. Defaults to ascending.",
              "in": "query",
              "name": "sort_order",
              "required": false,
              "schema": {
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              }
            },
            {
              "description": "E-mail address of principal to search for. Could be combined with match_criteria for searching.",
              "in": "query",
              "name": "email",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Set the status of users to get back.",
              "in": "query",
              "name": "status",
              "required": false,
              "schema": {
                "default": "enabled",
                "enum": [
                  "enabled",
                  "disabled",
                  "all"
                ],
                "type": "string"
              }
            },
            {
              "description": "Get only admin users within an account. Setting this would ignore the parameters: usernames, email",
              "in": "query",
              "name": "admin_only",
              "required": false,
              "schema": {
                "default": false,
                "enum": [
                  true,
                  false
                ],
                "type": "boolean"
              }
            },
            {
              "description": "Parameter for ordering principals by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-username",
              "in": "query",
              "name": "order_by",
              "required": false,
              "schema": {
                "enum": [
                  "username"
                ],
                "type": "string"
              }
            },
            {
              "description": "Parameter for optionally returning only usernames for principals, bypassing a call to IT.",
              "in": "query",
              "name": "username_only",
              "required": false,
              "schema": {
                "enum": [
                  true,
                  false
                ],
                "type": "boolean"
              }
            },
            {
              "description": "Parameter for selecting the type of principal to be returned.",
              "in": "query",
              "name": "type",
              "required": false,
              "schema": {
                "enum": [
                  "service-account",
                  "user"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PrincipalPagination"
                      },
                      {
                        "$ref": "#/components/schemas/ServiceAccountPagination"
                      }
                    ]
                  }
                }
              },
              "description": "A paginated list of principals"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to list principals"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "List the principals for a tenant",
          "tags": [
            "Principal"
          ]
        }
      },
      "/roles/": {
        "get": {
          "description": "By default, responses are sorted in ascending order by role name",
          "operationId": "listRoles",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/NameFilter"
            },
            {
              "$ref": "#/components/parameters/SystemFilter"
            },
            {
              "description": "Parameter for filtering resource by display_name using string contains search.",
              "in": "query",
              "name": "display_name",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/NameMatchCriteria"
            },
            {
              "$ref": "#/components/parameters/ScopeFilter"
            },
            {
              "description": "Parameter for ordering roles by value. For inverse ordering, supply '-' before the param value, such as: ?order_by=-name",
              "in": "query",
              "name": "order_by",
              "required": false,
              "schema": {
                "enum": [
                  "name",
                  "display_name",
                  "modified",
                  "policyCount"
                ],
                "type": "string"
              }
            },
            {
              "description": "Parameter for add list of fields to display for roles.",
              "explode": false,
              "in": "query",
              "name": "add_fields",
              "required": false,
              "schema": {
                "items": {
                  "enum": [
                    "groups_in",
                    "groups_in_count",
                    "access"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).",
              "in": "query",
              "name": "username",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The application name(s) to filter roles by, from permissions or external tenant name. This is an exact match. You may also use a comma-separated list to match on multiple applications.",
              "in": "query",
              "name": "application",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The permission(s) to filter roles by. This is an exact match. You may also use a comma-separated list to match on multiple permissions.",
              "in": "query",
              "name": "permission",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Parameter for filtering roles by external tenant name using string search.",
              "in": "query",
              "name": "external_tenant",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RolePaginationDynamic"
                  }
                }
              },
              "description": "A paginated list of role objects"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to list roles"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "List the roles for a tenant",
          "tags": [
            "Role"
          ]
        },
        "post": {
          "operationId": "createRole",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleIn"
                }
              }
            },
            "description": "Role to create",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleWithAccess"
                  }
                }
              },
              "description": "An object describing the role"
            },
            "400": {
              "description": "Bad Input"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to create role"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Create a role for a tenant",
          "tags": [
            "Role"
          ]
        }
      },
      "/roles/{uuid}/": {
        "delete": {
          "operationId": "deleteRole",
          "parameters": [
            {
              "description": "ID of role to delete",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Role deleted"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to delete role"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Delete a role in the tenant",
          "tags": [
            "Role"
          ]
        },
        "get": {
          "operationId": "getRole",
          "parameters": [
            {
              "description": "ID of role to get",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/ScopeFilter"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleWithAccess"
                  }
                }
              },
              "description": "A role object"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to get role"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Get a role in the tenant",
          "tags": [
            "Role"
          ]
        },
        "patch": {
          "operationId": "patchRole",
          "parameters": [
            {
              "description": "ID of role to update",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePatch"
                }
              }
            },
            "description": "Patch to a role"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleWithAccess"
                  }
                }
              },
              "description": "Role patched"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to patch role"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Patch a role in the tenant",
          "tags": [
            "Role"
          ]
        },
        "put": {
          "operationId": "updateRole",
          "parameters": [
            {
              "description": "ID of role to update",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePut"
                }
              }
            },
            "description": "Update to a role",
            "required": true
          },
          "responses": {
            "200": {
              "description": "Role updated"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to update role"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Update a role in the tenant",
          "tags": [
            "Role"
          ]
        }
      },
      "/roles/{uuid}/access/": {
        "get": {
          "operationId": "getRoleAccess",
          "parameters": [
            {
              "description": "ID of the role",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessPagination"
                  }
                }
              },
              "description": "A paginated list of the access objects for a role"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error403"
                  }
                }
              },
              "description": "Insufficient permissions to get access for role"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Get access for a role in the tenant",
          "tags": [
            "Role"
          ]
        }
      },
      "/status/": {
        "get": {
          "operationId": "getStatus",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Status"
                  }
                }
              },
              "description": "An object describing the server status"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unexpected Error"
            }
          },
          "summary": "Obtain server status",
          "tags": [
            "Status"
          ]
        }
      }
    },
    "security": [
      {
        "basic_auth": []
      }
    ],
    "servers": [
      {
        "description": "Production Server",
        "url": "https://console.redhat.com/{basePath}",
        "variables": {
          "basePath": {
            "default": "api/rbac/v1"
          }
        }
      },
      {
        "description": "Staging Server",
        "url": "https://console.stage.redhat.com/{basePath}",
        "variables": {
          "basePath": {
            "default": "api/rbac/v1"
          }
        }
      },
      {
        "description": "Development Server",
        "url": "http://localhost:{port}/{basePath}",
        "variables": {
          "basePath": {
            "default": "api/rbac/v1"
          },
          "port": {
            "default": "8000"
          }
        }
      }
    ],
    "tags": [
      {
        "description": "Operations about principals",
        "name": "Principal"
      },
      {
        "description": "Operations about groups",
        "name": "Group"
      },
      {
        "description": "Operations about roles",
        "name": "Role"
      },
      {
        "description": "Operations about access",
        "name": "Access"
      },
      {
        "description": "Operations about status",
        "name": "Status"
      },
      {
        "description": "Operations about cross account requests",
        "name": "CrossAccountRequest"
      }
    ]
  }
}