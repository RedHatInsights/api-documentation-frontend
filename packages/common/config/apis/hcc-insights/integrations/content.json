{
  "extras": {},
  "openapi": {
    "components": {
      "schemas": {
        "Application": {
          "properties": {
            "bundle_id": {
              "$ref": "#/components/schemas/UUID"
            },
            "display_name": {
              "type": "string"
            },
            "event_types": {
              "items": {
                "$ref": "#/components/schemas/EventType"
              },
              "type": "array",
              "uniqueItems": true
            },
            "id": {
              "$ref": "#/components/schemas/UUID"
            },
            "name": {
              "maxLength": 255,
              "pattern": "[a-z][a-z_0-9-]*",
              "type": "string"
            }
          },
          "required": [
            "name",
            "display_name",
            "bundle_id"
          ],
          "type": "object"
        },
        "BasicAuthentication": {
          "properties": {
            "password": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "Bundle": {
          "properties": {
            "applications": {
              "items": {
                "$ref": "#/components/schemas/Application"
              },
              "type": "array",
              "uniqueItems": true
            },
            "display_name": {
              "type": "string"
            },
            "id": {
              "$ref": "#/components/schemas/UUID"
            },
            "name": {
              "maxLength": 255,
              "pattern": "[a-z][a-z_0-9-]*",
              "type": "string"
            }
          },
          "required": [
            "name",
            "display_name"
          ],
          "type": "object"
        },
        "CamelProperties": {
          "properties": {
            "basicAuthentication": {
              "$ref": "#/components/schemas/BasicAuthentication"
            },
            "disableSslVerification": {
              "type": "boolean"
            },
            "extras": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "secretToken": {
              "maxLength": 255,
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "disableSslVerification",
            "url"
          ],
          "type": "object"
        },
        "Endpoint": {
          "properties": {
            "created": {
              "$ref": "#/components/schemas/LocalDateTime",
              "readOnly": true,
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "event_types": {
              "items": {
                "format": "uuid",
                "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "event_types_group_by_bundles_and_applications": {
              "items": {
                "$ref": "#/components/schemas/Bundle"
              },
              "type": "array",
              "uniqueItems": true
            },
            "id": {
              "$ref": "#/components/schemas/UUID"
            },
            "name": {
              "maxLength": 255,
              "type": "string"
            },
            "properties": {
              "$ref": "#/components/schemas/EndpointProperties",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CamelProperties"
                },
                {
                  "$ref": "#/components/schemas/SystemSubscriptionProperties"
                },
                {
                  "$ref": "#/components/schemas/WebhookProperties"
                },
                {
                  "$ref": "#/components/schemas/PagerDutyProperties"
                }
              ],
              "type": "object"
            },
            "server_errors": {
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            },
            "status": {
              "$ref": "#/components/schemas/EndpointStatus"
            },
            "sub_type": {
              "maxLength": 20,
              "type": "string"
            },
            "type": {
              "$ref": "#/components/schemas/EndpointType"
            },
            "updated": {
              "$ref": "#/components/schemas/LocalDateTime",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name",
            "description",
            "type"
          ],
          "type": "object"
        },
        "EndpointPage": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/Endpoint"
              },
              "type": "array"
            },
            "links": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "meta": {
              "$ref": "#/components/schemas/Meta"
            }
          },
          "required": [
            "data",
            "links",
            "meta"
          ],
          "type": "object"
        },
        "EndpointProperties": {
          "type": "object"
        },
        "EndpointStatus": {
          "enum": [
            "DELETING",
            "FAILED",
            "NEW",
            "PROVISIONING",
            "READY",
            "UNKNOWN"
          ],
          "type": "string"
        },
        "EndpointTestRequest": {
          "properties": {
            "message": {
              "pattern": "\\S",
              "type": "string"
            }
          },
          "required": [
            "message"
          ],
          "type": "object"
        },
        "EndpointType": {
          "enum": [
            "ansible",
            "camel",
            "drawer",
            "email_subscription",
            "webhook",
            "pagerduty"
          ],
          "type": "string"
        },
        "EventType": {
          "properties": {
            "application": {
              "$ref": "#/components/schemas/Application"
            },
            "description": {
              "type": "string"
            },
            "display_name": {
              "type": "string"
            },
            "id": {
              "$ref": "#/components/schemas/UUID"
            },
            "name": {
              "maxLength": 255,
              "pattern": "[a-z][a-z_0-9-]*",
              "type": "string"
            }
          },
          "required": [
            "name",
            "display_name"
          ],
          "type": "object"
        },
        "HttpType": {
          "enum": [
            "GET",
            "POST",
            "PUT"
          ],
          "type": "string"
        },
        "LocalDateTime": {
          "examples": [
            "2022-03-10T12:15:50"
          ],
          "format": "date-time",
          "type": "string"
        },
        "Meta": {
          "properties": {
            "count": {
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "count"
          ],
          "type": "object"
        },
        "NotificationHistory": {
          "properties": {
            "created": {
              "$ref": "#/components/schemas/LocalDateTime",
              "readOnly": true,
              "type": "string"
            },
            "details": {
              "additionalProperties": {},
              "type": "object"
            },
            "endpointId": {
              "$ref": "#/components/schemas/UUID"
            },
            "endpointType": {
              "$ref": "#/components/schemas/EndpointType"
            },
            "id": {
              "$ref": "#/components/schemas/UUID"
            },
            "invocationResult": {
              "type": "boolean"
            },
            "invocationTime": {
              "format": "int64",
              "type": "integer"
            },
            "status": {
              "$ref": "#/components/schemas/NotificationStatus"
            }
          },
          "required": [
            "invocationTime",
            "invocationResult",
            "status"
          ],
          "type": "object"
        },
        "NotificationStatus": {
          "enum": [
            "FAILED_INTERNAL",
            "FAILED_EXTERNAL",
            "PROCESSING",
            "SENT",
            "SUCCESS"
          ],
          "type": "string"
        },
        "PagerDutyProperties": {
          "properties": {
            "secretToken": {
              "maxLength": 32,
              "type": "string"
            },
            "severity": {
              "$ref": "#/components/schemas/PagerDutySeverity"
            }
          },
          "required": [
            "severity",
            "secretToken"
          ],
          "type": "object"
        },
        "PagerDutySeverity": {
          "enum": [
            "critical",
            "error",
            "warning",
            "info"
          ],
          "type": "string"
        },
        "RequestSystemSubscriptionProperties": {
          "properties": {
            "group_id": {
              "$ref": "#/components/schemas/UUID"
            },
            "only_admins": {
              "type": "boolean"
            }
          },
          "required": [
            "only_admins"
          ],
          "type": "object"
        },
        "SystemSubscriptionProperties": {
          "properties": {
            "groupId": {
              "$ref": "#/components/schemas/UUID"
            },
            "ignorePreferences": {
              "type": "boolean"
            },
            "onlyAdmins": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "UUID": {
          "format": "uuid",
          "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
          "type": "string"
        },
        "WebhookProperties": {
          "properties": {
            "basicAuthentication": {
              "$ref": "#/components/schemas/BasicAuthentication"
            },
            "bearerAuthentication": {
              "type": "string"
            },
            "disableSslVerification": {
              "type": "boolean"
            },
            "method": {
              "$ref": "#/components/schemas/HttpType"
            },
            "secretToken": {
              "maxLength": 255,
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "disableSslVerification",
            "method",
            "url"
          ],
          "type": "object"
        }
      }
    },
    "info": {
      "description": "The API for Integrations provides endpoints that you can use to create and manage integrations between third-party applications and the Red Hat Hybrid Cloud Console.",
      "title": "Integrations",
      "version": "v1.0"
    },
    "openapi": "3.1.0",
    "paths": {
      "/endpoints": {
        "get": {
          "description": "Provides a list of endpoints. Use this endpoint to find specific endpoints.",
          "operationId": "EndpointResource$V1_getEndpoints",
          "parameters": [
            {
              "description": "Number of items per page. If the value is 0, it will return all elements",
              "in": "query",
              "name": "limit",
              "schema": {
                "default": "20",
                "maximum": 200,
                "minimum": 1,
                "type": "integer"
              }
            },
            {
              "description": "Page number. Starts at first page (0), if not specified starts at first page.",
              "in": "query",
              "name": "pageNumber",
              "schema": {
                "minimum": 1,
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "active",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "offset",
              "schema": {
                "format": "int32",
                "minimum": 0,
                "type": "integer"
              }
            },
            {
              "deprecated": true,
              "in": "query",
              "name": "sortBy",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "sort_by",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "type",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EndpointPage"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List endpoints"
        },
        "post": {
          "description": "Creates a new endpoint by providing data such as a description, a name, and the endpoint properties. Use this endpoint to create endpoints for integration with third-party services such as webhooks, Slack, or Google Chat.",
          "operationId": "EndpointResource$V1_createEndpoint",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Endpoint"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad data passed, that does not correspond to the definition or Endpoint.properties are empty"
            }
          },
          "summary": "Create a new endpoint"
        }
      },
      "/endpoints/system/drawer_subscription": {
        "post": {
          "description": "Adds the drawer system endpoint into the system and specifies the role-based access control (RBAC) group that will receive notifications. Use this endpoint to add an animation as a notification in the UI.",
          "operationId": "EndpointResource$V1_getOrCreateDrawerSubscriptionEndpoint",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestSystemSubscriptionProperties"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Endpoint"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Add a drawer endpoint"
        }
      },
      "/endpoints/system/email_subscription": {
        "post": {
          "description": "Adds the email subscription endpoint into the system and specifies the role-based access control (RBAC) group that will receive email notifications. Use this endpoint in behavior groups to send emails when an action linked to the behavior group is triggered.",
          "operationId": "EndpointResource$V1_getOrCreateEmailSubscriptionEndpoint",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestSystemSubscriptionProperties"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Endpoint"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create an email subscription endpoint"
        }
      },
      "/endpoints/{endpointId}/eventType/{eventTypeId}": {
        "delete": {
          "description": "Delete the link between an endpoint and an event type.",
          "operationId": "EndpointResource$V1_deleteEventTypeFromEndpoint",
          "parameters": [
            {
              "in": "path",
              "name": "endpointId",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            {
              "in": "path",
              "name": "eventTypeId",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          ],
          "responses": {
            "204": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "No Content"
            },
            "404": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "No event type or endpoint found with the passed id."
            }
          },
          "summary": "Delete the link between an endpoint and an event type"
        },
        "put": {
          "description": "Add a link between an endpoint and an event type.",
          "operationId": "EndpointResource$V1_addEventTypeToEndpoint",
          "parameters": [
            {
              "in": "path",
              "name": "endpointId",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            {
              "in": "path",
              "name": "eventTypeId",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          ],
          "responses": {
            "204": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "No Content"
            },
            "404": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "No event type or endpoint found with the passed id."
            }
          },
          "summary": "Add a link between an endpoint and an event type"
        }
      },
      "/endpoints/{endpointId}/eventTypes": {
        "put": {
          "description": "Update  links between an endpoint and event types.",
          "operationId": "EndpointResource$V1_updateEventTypesLinkedToEndpoint",
          "parameters": [
            {
              "in": "path",
              "name": "endpointId",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "format": "uuid",
                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "No Content"
            },
            "404": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "No event type or endpoint found with passed ids."
            }
          },
          "summary": "Update  links between an endpoint and event types"
        }
      },
      "/endpoints/{id}": {
        "delete": {
          "description": "Deletes an endpoint. Use this endpoint to delete an endpoint that is no longer needed. Deleting an endpoint that is already linked to a behavior group will unlink it from the behavior group. You cannot delete system endpoints.",
          "operationId": "EndpointResource$V1_deleteEndpoint",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          ],
          "responses": {
            "204": {
              "content": {},
              "description": "The integration has been deleted"
            }
          },
          "summary": "Delete an endpoint"
        },
        "get": {
          "description": "Retrieves the public information associated with an endpoint such as its description, name, and properties.",
          "operationId": "EndpointResource$V1_getEndpoint",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Endpoint"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Retrieve an endpoint"
        },
        "put": {
          "description": "Updates the endpoint configuration. Use this to update an existing endpoint. Any changes to the endpoint take place immediately.",
          "operationId": "EndpointResource$V1_updateEndpoint",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update an endpoint"
        }
      },
      "/endpoints/{id}/enable": {
        "delete": {
          "description": "Disables an endpoint so that the endpoint will not be executed after an operation that uses the endpoint is started. An operation that is already running can still execute the endpoint. Disable an endpoint when you want to stop it from running and might want to re-enable it in the future.",
          "operationId": "EndpointResource$V1_disableEndpoint",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          ],
          "responses": {
            "204": {
              "content": {},
              "description": "The integration has been disabled"
            }
          },
          "summary": "Disable an endpoint"
        },
        "put": {
          "description": "Enables an endpoint that is disabled so that the endpoint will be executed on the following operations that use the endpoint. An operation must be restarted to use the enabled endpoint.",
          "operationId": "EndpointResource$V1_enableEndpoint",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Enable an endpoint"
        }
      },
      "/endpoints/{id}/history": {
        "get": {
          "operationId": "EndpointResource$V1_getEndpointHistory",
          "parameters": [
            {
              "description": "Number of items per page, if not specified or 0 is used, returns a maximum of 500 elements.",
              "in": "query",
              "name": "limit",
              "schema": {
                "default": "20",
                "maximum": 200,
                "minimum": 1,
                "type": "integer"
              }
            },
            {
              "description": "Page number. Starts at first page (0), if not specified starts at first page.",
              "in": "query",
              "name": "pageNumber",
              "schema": {
                "minimum": 1,
                "type": "integer"
              }
            },
            {
              "description": "Include the detail in the reply",
              "in": "query",
              "name": "includeDetail",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            {
              "in": "query",
              "name": "offset",
              "schema": {
                "format": "int32",
                "minimum": 0,
                "type": "integer"
              }
            },
            {
              "deprecated": true,
              "in": "query",
              "name": "sortBy",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "sort_by",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/NotificationHistory"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Get Endpoint History",
          "tags": [
            "V 1"
          ]
        }
      },
      "/endpoints/{id}/history/{history_id}/details": {
        "get": {
          "description": "Retrieves extended information about the outcome of an event notification related to the specified endpoint. Use this endpoint to learn why an event delivery failed.",
          "operationId": "EndpointResource$V1_getDetailedEndpointHistory",
          "parameters": [
            {
              "in": "path",
              "name": "history_id",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Retrieve event notification details"
        }
      },
      "/endpoints/{uuid}/test": {
        "post": {
          "description": "Generates a test notification for a particular endpoint. Use this endpoint to test that an integration that you created works as expected. This endpoint triggers a test notification that should be received by the target recipient. For example, if you set up a webhook as the action to take upon receiving a notification, you should receive a test notification when using this endpoint.",
          "operationId": "EndpointResource$V1_testEndpoint",
          "parameters": [
            {
              "description": "The UUID of the endpoint to test",
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointTestRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "No Content"
            }
          },
          "summary": "Generate a test notification"
        }
      }
    },
    "servers": [
      {
        "description": "Production Server",
        "url": "https://console.redhat.com/{basePath}",
        "variables": {
          "basePath": {
            "default": "/api/integrations/v1.0"
          }
        }
      },
      {
        "description": "Development Server",
        "url": "http://localhost:{port}/{basePath}",
        "variables": {
          "basePath": {
            "default": "/api/integrations/v1.0"
          },
          "port": {
            "default": "8080"
          }
        }
      }
    ]
  }
}