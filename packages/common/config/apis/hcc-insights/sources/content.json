{
  "extras": {},
  "openapi": {
    "components": {
      "parameters": {
        "ID": {
          "description": "ID of the resource",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "example": "12345",
            "pattern": "^\\d+$",
            "type": "string"
          }
        },
        "QueryFilter": {
          "description": "Filter for querying collections. The format of the filters is as follows: `filter[subresource][field][operation]=\"value\"`.\n",
          "example": "filter[name][eq]=\"My shiny source\"\n",
          "in": "query",
          "name": "filter",
          "schema": {
            "type": "string"
          }
        },
        "QueryLimit": {
          "description": "The numbers of items to return per page.",
          "in": "query",
          "name": "limit",
          "schema": {
            "default": 100,
            "maximum": 1000,
            "minimum": 1,
            "type": "integer"
          }
        },
        "QueryOffset": {
          "description": "The number of items to skip before starting to collect the result set.",
          "in": "query",
          "name": "offset",
          "schema": {
            "default": 0,
            "minimum": 0,
            "type": "integer"
          }
        },
        "QuerySortBy": {
          "description": "The list of attribute and order to sort the result set by.",
          "example": "sort_by=name",
          "in": "query",
          "name": "sort_by",
          "schema": {
            "type": "string"
          }
        }
      },
      "responses": {
        "BadRequest": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorBadRequest"
              }
            }
          },
          "description": "There is a problem either with the parameters or the payload"
        },
        "NotFound": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorNotFound"
              }
            }
          },
          "description": "The requested resource was not found"
        },
        "Unauthorized": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorUnauthorized"
              }
            }
          },
          "description": "Either the \"x-rh-identity\" or the \"x-rh-sources-psk\" headers are missing, or you don't have enough permission to query the endpoint"
        }
      },
      "schemas": {
        "AppMetaData": {
          "additionalProperties": false,
          "properties": {
            "application_type_id": {
              "description": "The ID of the application the metadata belongs to",
              "example": "12345",
              "pattern": "^\\d+$",
              "type": "string"
            },
            "created_at": {
              "description": "The timestamp of the creation of the app metadata type",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "name": {
              "description": "The name of the step of the metadata",
              "example": "s3",
              "type": "string"
            },
            "payload": {
              "description": "The payload of the step",
              "type": "object"
            },
            "updated_at": {
              "description": "The timestamp of the last time this app metadata type got updated",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "AppMetaDataCollection": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/AppMetaData"
              },
              "type": "array"
            },
            "links": {
              "$ref": "#/components/schemas/CollectionLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/CollectionMetadata"
            }
          },
          "type": "object"
        },
        "Application": {
          "additionalProperties": false,
          "properties": {
            "application_type_id": {
              "$ref": "#/components/schemas/ID"
            },
            "availability_status": {
              "description": "The availability status of the application",
              "enum": [
                "available",
                "in_progress",
                "partially_available",
                "unavailable"
              ],
              "example": "available",
              "type": "string"
            },
            "availability_status_error": {
              "description": "The received error message when polling for the availability status",
              "example": "Destination host unreachable",
              "type": "string"
            },
            "created_at": {
              "description": "The timestamp of the creation of the application",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "extra": {
              "description": "Any extra information you want stored for the application, in JSON format",
              "type": "object"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "last_available_at": {
              "description": "The timestamp for when the application was last available at.",
              "format": "date-time",
              "type": "string"
            },
            "last_checked_at": {
              "description": "Timestamp of the last time the availability was checked for the application",
              "example": "2000-01-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "paused_at": {
              "description": "The timestamp for when the application was paused",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "source_id": {
              "$ref": "#/components/schemas/ID"
            },
            "updated_at": {
              "description": "The timestamp of the last time this application got updated",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "ApplicationAuthentication": {
          "additionalProperties": false,
          "properties": {
            "application_id": {
              "$ref": "#/components/schemas/ID"
            },
            "authentication_id": {
              "$ref": "#/components/schemas/ID"
            },
            "created_at": {
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "updated_at": {
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "ApplicationAuthenticationCreate": {
          "description": "Expected payload when creating an application authentication",
          "properties": {
            "application_id": {
              "$ref": "#/components/schemas/IDW"
            },
            "authentication_id": {
              "$ref": "#/components/schemas/IDW"
            }
          },
          "type": "object"
        },
        "ApplicationAuthenticationRead": {
          "description": "ApplicationAuthentication object",
          "properties": {
            "application_id": {
              "$ref": "#/components/schemas/ID"
            },
            "authentication_id": {
              "$ref": "#/components/schemas/ID"
            },
            "created_at": {
              "description": "The timestamp of the creation of the application",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "updated_at": {
              "description": "The timestamp of the last time this application got updated",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "ApplicationAuthenticationsCollection": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/ApplicationAuthenticationRead"
              },
              "type": "array"
            },
            "links": {
              "$ref": "#/components/schemas/CollectionLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/CollectionMetadata"
            }
          },
          "type": "object"
        },
        "ApplicationCreate": {
          "description": "Expected payload to create an application",
          "properties": {
            "application_type_id": {
              "$ref": "#/components/schemas/IDW"
            },
            "extra": {
              "description": "Any extra information you want stored for the application, in JSON format",
              "type": "object"
            },
            "source_id": {
              "$ref": "#/components/schemas/IDW"
            }
          },
          "type": "object"
        },
        "ApplicationType": {
          "properties": {
            "created_at": {
              "description": "The timestamp of the creation of the application type",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "dependent_applications": {
              "description": "The dependent applications of this application type",
              "type": "object"
            },
            "display_name": {
              "description": "The display name for the application type",
              "example": "My application type",
              "type": "string"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "name": {
              "description": "The name for the application type",
              "example": "/insights/platform/my-application_type",
              "type": "string"
            },
            "supported_authentication_types": {
              "description": "The supported authentication types the applications of this type support",
              "example": "{\n  \"amazon\": [\n    \"arn\"\n  ],\n  \"red-hat\": [\n    \"red-hat-creds\"\n  ]\n}\n",
              "type": "object"
            },
            "supported_source_types": {
              "description": "The supported source types the applications of this type support",
              "example": [
                "amazon",
                "red-hat"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "updated_at": {
              "description": "The timestamp of the last time this application type got updated",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "ApplicationTypesCollection": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/ApplicationType"
              },
              "type": "array"
            },
            "links": {
              "$ref": "#/components/schemas/CollectionLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/CollectionMetadata"
            }
          },
          "type": "object"
        },
        "ApplicationUpdate": {
          "description": "Expected payload to update an application",
          "properties": {
            "availability_status": {
              "description": "The availability status of the application",
              "enum": [
                "available",
                "in_progress",
                "partially_available",
                "unavailable"
              ],
              "example": "available",
              "type": "string"
            },
            "availability_status_error": {
              "description": "The received error message when polling for the availability status",
              "example": "Destination host unreachable",
              "type": "string"
            },
            "extra": {
              "description": "Any extra information you want stored for the application, in JSON format",
              "type": "object"
            },
            "last_available_at": {
              "description": "The timestamp for when the application was last available at.",
              "format": "date-time",
              "type": "string"
            },
            "last_checked_at": {
              "description": "Timestamp of the last time the availability was checked for the application",
              "example": "2000-01-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ApplicationsCollection": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/Application"
              },
              "type": "array"
            },
            "links": {
              "$ref": "#/components/schemas/CollectionLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/CollectionMetadata"
            }
          },
          "type": "object"
        },
        "AuthenticationCreate": {
          "description": "Expected payload to create an Authentication",
          "properties": {
            "authtype": {
              "description": "The type of the authentication. You can find this by listing the source types or the application types",
              "example": "arn",
              "type": "string"
            },
            "availability_status_error": {
              "description": "The received error message when polling for the availability status",
              "example": "Destination host unreachable",
              "type": "string"
            },
            "extra": {
              "description": "Any extra information the authentication may have",
              "type": "object"
            },
            "name": {
              "description": "The authentication's name",
              "example": "OpenShift default",
              "type": "string"
            },
            "password": {
              "description": "The password for the authentication",
              "example": "MyS3cr3Tp4$$w0rD",
              "type": "string"
            },
            "resource_id": {
              "$ref": "#/components/schemas/IDW"
            },
            "resource_type": {
              "description": "The type of the resource this authentication belongs to",
              "enum": [
                "Application",
                "Authentication",
                "Endpoint",
                "Source"
              ],
              "example": "Endpoint",
              "type": "string"
            },
            "username": {
              "description": "The username for the authentication",
              "example": "user@example.com",
              "type": "string"
            }
          },
          "type": "object"
        },
        "AuthenticationEdit": {
          "description": "Expected payload when editing an Authentication object",
          "properties": {
            "authtype": {
              "description": "The type of the authentication. You can find this by listing the source types or the application types",
              "example": "arn",
              "type": "string"
            },
            "availability_status": {
              "description": "The availability status of the authentication",
              "enum": [
                "in_progress",
                "available",
                "unavailable"
              ],
              "example": "available"
            },
            "availability_status_error": {
              "description": "The received error message when polling for the availability status",
              "example": "Destination host unreachable",
              "type": "string"
            },
            "extra": {
              "description": "Any extra information the authentication may have",
              "type": "object"
            },
            "name": {
              "description": "The authentication's name",
              "example": "OpenShift default",
              "type": "string"
            },
            "password": {
              "description": "The password for the authentication",
              "example": "MyS3cr3Tp4$$w0rD",
              "type": "string"
            },
            "username": {
              "description": "The username for the authentication",
              "example": "user@example.com",
              "type": "string"
            }
          },
          "type": "object"
        },
        "AuthenticationRead": {
          "description": "Authentication object",
          "properties": {
            "authtype": {
              "description": "The type of the authentication. You can find this by listing the source types or the application types",
              "example": "arn",
              "type": "string"
            },
            "availability_status": {
              "description": "The availability status of the authentication",
              "enum": [
                "in_progress",
                "available",
                "unavailable"
              ],
              "example": "available"
            },
            "availability_status_error": {
              "description": "The received error message when polling for the availability status",
              "example": "Destination host unreachable",
              "type": "string"
            },
            "extra": {
              "description": "Any extra information the authentication may have",
              "properties": {
                "azure": {
                  "properties": {
                    "tenant_id": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "external_id": {
                  "description": "If the authentication is related to a AWS Source, it may contain an external ID.",
                  "example": "a2f8ec37-6d74-4af8-9e92-b83345651202",
                  "type": "string"
                },
                "marketplace": {
                  "description": "If the authentication is of the \"marketplace-token\" type, then this key will contain an unexpired token for the API key that the authentication stores.",
                  "properties": {
                    "access_token": {
                      "description": "The authorization token",
                      "example": "abcdef-token",
                      "type": "string"
                    },
                    "expiration": {
                      "description": "The Unix timestamp for the expiration of the token",
                      "example": 1609455600,
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "name": {
              "description": "The authentication's name",
              "example": "OpenShift default",
              "type": "string"
            },
            "resource_id": {
              "$ref": "#/components/schemas/ID"
            },
            "resource_type": {
              "description": "The type of the resource this authentication belongs to",
              "enum": [
                "Application",
                "Authentication",
                "Endpoint",
                "Source"
              ],
              "example": "Endpoint",
              "type": "string"
            },
            "username": {
              "description": "The username for the authentication",
              "example": "user@example.com",
              "type": "string"
            }
          },
          "type": "object"
        },
        "AuthenticationsCollection": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/AuthenticationRead"
              },
              "type": "array"
            },
            "links": {
              "$ref": "#/components/schemas/CollectionLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/CollectionMetadata"
            }
          },
          "type": "object"
        },
        "BulkCreatePayload": {
          "properties": {
            "applications": {
              "description": "Array of application objects to create. The operation looks up the parent Source by the `source_name` attribute so the `source_name` must match one of the `source` names in the payload. You can specify the application type by using either the `application_type_name` or the `application_type_id`.\n",
              "items": {
                "properties": {
                  "application_type_id": {
                    "description": "The ID of the application type",
                    "example": "2",
                    "type": "string"
                  },
                  "application_type_name": {
                    "description": "The name of the application type",
                    "example": "/insights/platform/app-studio",
                    "type": "string"
                  },
                  "extra": {
                    "description": "Any extra information you would like to store in JSON format",
                    "format": "string",
                    "type": "object"
                  },
                  "source_id": {
                    "description": "The ID of the soruce this application will be attached to",
                    "example": "412",
                    "type": "string"
                  },
                  "source_name": {
                    "description": "The name of the source this application will be attached to",
                    "example": "My shiny source",
                    "type": "string"
                  }
                },
                "required": [
                  "source_name"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "authentications": {
              "description": "Array of authentications to create. `resource_type` tells the action where to look for the parent, must be either application, endpoint or source.\nIf the parent is a source, it looks up by name. If the parent is an endpoint, it looks up via host so the hostname must match. If the parent is an application, it looks up via application type so the value must match the application type which matches.\n",
              "items": {
                "properties": {
                  "authtype": {
                    "description": "The type of the authentication. You can find this by listing the source types or the application types",
                    "example": "arn",
                    "type": "string"
                  },
                  "extra": {
                    "description": "Any extra information you would like to store in JSON format",
                    "type": "object"
                  },
                  "password": {
                    "description": "The password of the authentication",
                    "example": "MyP4ssW0rd",
                    "type": "string"
                  },
                  "resource_name": {
                    "description": "The name of the resource this authentication relates to",
                    "example": "My shiny source",
                    "type": "string"
                  },
                  "resource_type": {
                    "description": "The type of the resource this authentication relates to",
                    "enum": [
                      "Application",
                      "Endpoint",
                      "Source"
                    ],
                    "example": "application",
                    "type": "string"
                  },
                  "username": {
                    "description": "The username of the authentication",
                    "example": "arn:whatever",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "endpoints": {
              "description": "Array of endpoint objects to create. The operation looks up the parent source by the `source_name` attribute so the `source_name` must match one of the `source`'s names in the payload.\n",
              "items": {
                "properties": {
                  "certificate_authority": {
                    "description": "Optional X.509 Certificate Authority.",
                    "example": "Let's Encrypt",
                    "type": "string"
                  },
                  "host": {
                    "description": "URI host component of the endpoint.",
                    "example": "example.com",
                    "type": "string"
                  },
                  "path": {
                    "description": "URI path component of the endpoint.",
                    "example": "/example/path",
                    "type": "string"
                  },
                  "port": {
                    "default": 443,
                    "description": "URI port component of the endpoint.",
                    "example": 443,
                    "type": "integer"
                  },
                  "scheme": {
                    "default": "https",
                    "description": "URI scheme component of the endpoint.",
                    "example": "https",
                    "type": "string"
                  },
                  "source_name": {
                    "description": "The name of the source this endpoint will be attached to",
                    "example": "My shiny source",
                    "type": "string"
                  },
                  "verify_ssl": {
                    "default": true,
                    "description": "Should the SSL certificate be verified?",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "source_name"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "sources": {
              "description": "Array of source objects to create\n",
              "items": {
                "properties": {
                  "app_creation_workflow": {
                    "description": "The way the source is going to be created: manually, or using superkey?",
                    "enum": [
                      "manual_configuration",
                      "account_authorization"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the source",
                    "example": "My shiny source",
                    "type": "string"
                  },
                  "source_ref": {
                    "description": "The external referece or ID for the source",
                    "example": "my-long-external-ref",
                    "type": "string"
                  },
                  "source_type_name": {
                    "description": "The type of the source that will be created",
                    "enum": [
                      "amazon",
                      "azure",
                      "bitbucket",
                      "dockerhub",
                      "google",
                      "github",
                      "gitlab",
                      "oracle-cloud-infrastructure",
                      "openshift",
                      "quay",
                      "rh-marketplace",
                      "satellite",
                      "ibm"
                    ],
                    "example": "amazon",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "source_type_name"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "BulkCreateResponse": {
          "properties": {
            "applications": {
              "description": "An array containing the created applications",
              "items": {
                "$ref": "#/components/schemas/Application"
              },
              "type": "array"
            },
            "authentications": {
              "description": "An array containing the created authentications",
              "items": {
                "$ref": "#/components/schemas/AuthenticationRead"
              },
              "type": "array"
            },
            "endpoints": {
              "description": "An array containing the created endpoints",
              "items": {
                "$ref": "#/components/schemas/Endpoint"
              },
              "type": "array"
            },
            "sources": {
              "description": "An array containing the created sources",
              "items": {
                "$ref": "#/components/schemas/Source"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "CollectionLinks": {
          "properties": {
            "first": {
              "description": "The link to the first object of the list",
              "example": "https://example.com/resource/1",
              "type": "string"
            },
            "last": {
              "description": "The link to the last object of the list",
              "example": "https://example.com/resource/10000",
              "type": "string"
            },
            "next": {
              "description": "The link to the next page of objects",
              "example": "https://example.com/resource/11",
              "type": "string"
            },
            "prev": {
              "description": "The link to the previous page of objects",
              "example": "https://example.com/resource/1",
              "type": "string"
            }
          },
          "type": "object"
        },
        "CollectionMetadata": {
          "properties": {
            "count": {
              "description": "The total amount of objects in the database",
              "example": 1000,
              "type": "integer"
            },
            "limit": {
              "default": 100,
              "description": "The limit of objects that was applied to the object list",
              "example": 100,
              "type": "integer"
            },
            "offset": {
              "default": 0,
              "description": "The offset that was applied to the list",
              "example": 0,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "Endpoint": {
          "description": "Representation of an endpoint object",
          "properties": {
            "availability_status": {
              "description": "The availability status of the endpoint.",
              "enum": [
                "",
                "in_progress",
                "available",
                "unavailable"
              ],
              "example": "available",
              "type": "string"
            },
            "availability_status_error": {
              "description": "The received error message when polling for the availability status",
              "example": "Destination host unreachable",
              "type": "string"
            },
            "certificate_authority": {
              "description": "Optional X.509 Certificate Authority",
              "type": "string"
            },
            "created_at": {
              "description": "The timestamp for when the endpoint was created.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "default": {
              "description": "Mark endpoint as the default endpoint? Each source can only have one default endpoint. It gets set to true by default if the given source has no endpoints.",
              "example": false,
              "type": "boolean"
            },
            "host": {
              "description": "URI host component of the endpoint.",
              "example": "example.com",
              "type": "string"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "last_available_at": {
              "description": "Timestamp of the last time the connection was available",
              "example": "2000-01-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "last_checked_at": {
              "description": "Timestamp of the last time the availability was checked for the connection",
              "example": "2000-01-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "path": {
              "description": "URI path component of the endpoint.",
              "example": "/example/path",
              "type": "string"
            },
            "paused_at": {
              "description": "The timestamp for when the endpoint was paused",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "port": {
              "default": 443,
              "description": "URI port component of the endpoint.",
              "example": 443,
              "type": "integer"
            },
            "receptor_node": {
              "description": "Identifier of a receptor node.",
              "type": "string"
            },
            "role": {
              "description": "The role of the endpoint. It must be unique among the source's endpoints.",
              "type": "string"
            },
            "scheme": {
              "default": "https",
              "description": "The scheme of the protocol.",
              "example": "https",
              "type": "string"
            },
            "source_id": {
              "$ref": "#/components/schemas/ID"
            },
            "updated_at": {
              "description": "The timestamp for when the source was last updated",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "verify_ssl": {
              "default": true,
              "description": "Should the SSL certificate be verified?",
              "example": true,
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "EndpointCreate": {
          "properties": {
            "availability_status": {
              "description": "The availability status of the endpoint.",
              "enum": [
                "",
                "in_progress",
                "available",
                "unavailable"
              ],
              "example": "available",
              "type": "string"
            },
            "certificate_authority": {
              "description": "Optional X.509 Certificate Authority.",
              "example": "Let's Encrypt",
              "type": "string"
            },
            "default": {
              "description": "Mark endpoint as the default endpoint? Each source can only have one default endpoint. It gets set to true by default if the given source has no endpoints.",
              "example": false,
              "type": "boolean"
            },
            "host": {
              "description": "URI host component of the endpoint.",
              "example": "example.com",
              "type": "string"
            },
            "path": {
              "description": "URI path component of the endpoint.",
              "example": "/example/path",
              "type": "string"
            },
            "port": {
              "default": 443,
              "description": "URI port component of the endpoint.",
              "example": 443,
              "type": "integer"
            },
            "receptor_node": {
              "description": "Identifier of a receptor node.",
              "type": "string"
            },
            "role": {
              "description": "The role of the endpoint. It must be unique among the source's endpoints.",
              "type": "string"
            },
            "scheme": {
              "default": "https",
              "description": "The scheme of the protocol.",
              "example": "https",
              "type": "string"
            },
            "source_id": {
              "description": "The id of the source this endpoint relates to.",
              "example": "12",
              "type": "string"
            },
            "verify_ssl": {
              "default": true,
              "description": "Should the SSL certificate be verified?",
              "example": true,
              "type": "boolean"
            }
          },
          "required": [
            "source_id"
          ],
          "type": "object"
        },
        "EndpointEdit": {
          "description": "Expected payload when editing an endpoint",
          "properties": {
            "availability_status": {
              "description": "The availability status of the endpoint.",
              "enum": [
                "",
                "in_progress",
                "available",
                "unavailable"
              ],
              "example": "available",
              "type": "string"
            },
            "availability_status_error": {
              "description": "The received error message when polling for the availability status",
              "example": "Destination host unreachable",
              "type": "string"
            },
            "certificate_authority": {
              "description": "Optional X.509 Certificate Authority",
              "type": "string"
            },
            "default": {
              "description": "Mark endpoint as the default endpoint? Each source can only have one default endpoint. It gets set to true by default if the given source has no endpoints.",
              "example": false,
              "type": "boolean"
            },
            "host": {
              "description": "URI host component of the endpoint.",
              "example": "example.com",
              "type": "string"
            },
            "last_available_at": {
              "description": "Timestamp of the last time the connection was available",
              "example": "2000-01-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "last_checked_at": {
              "description": "Timestamp of the last time the availability was checked for the connection",
              "example": "2000-01-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "path": {
              "description": "URI path component of the endpoint.",
              "example": "/example/path",
              "type": "string"
            },
            "port": {
              "default": 443,
              "description": "URI port component of the endpoint.",
              "example": 443,
              "type": "integer"
            },
            "receptor_node": {
              "description": "Identifier of a receptor node.",
              "type": "string"
            },
            "role": {
              "description": "The role of the endpoint. It must be unique among the source's endpoints.",
              "type": "string"
            },
            "scheme": {
              "default": "https",
              "description": "The scheme of the protocol.",
              "example": "https",
              "type": "string"
            },
            "verify_ssl": {
              "default": true,
              "description": "Should the SSL certificate be verified?",
              "example": true,
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "EndpointRead": {
          "description": "Endpoint object",
          "properties": {
            "availability_status": {
              "description": "The availability status of the endpoint.",
              "enum": [
                "",
                "in_progress",
                "available",
                "unavailable"
              ],
              "example": "available",
              "type": "string"
            },
            "availability_status_error": {
              "description": "The received error message when polling for the availability status",
              "example": "Destination host unreachable",
              "type": "string"
            },
            "certificate_authority": {
              "description": "Optional X.509 Certificate Authority",
              "type": "string"
            },
            "created_at": {
              "description": "The timestamp for when the endpoint was created.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "default": {
              "description": "Mark endpoint as the default endpoint? Each source can only have one default endpoint. It gets set to true by default if the given source has no endpoints.",
              "example": false,
              "type": "boolean"
            },
            "host": {
              "description": "URI host component of the endpoint.",
              "example": "example.com",
              "type": "string"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "last_available_at": {
              "description": "Timestamp of the last time the connection was available",
              "example": "2000-01-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "last_checked_at": {
              "description": "Timestamp of the last time the availability was checked for the connection",
              "example": "2000-01-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "path": {
              "description": "URI path component of the endpoint.",
              "example": "/example/path",
              "type": "string"
            },
            "paused_at": {
              "description": "The timestamp for when the endpoint was paused",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "port": {
              "default": 443,
              "description": "URI port component of the endpoint.",
              "example": 443,
              "type": "integer"
            },
            "receptor_node": {
              "description": "Identifier of a receptor node.",
              "type": "string"
            },
            "role": {
              "description": "The role of the endpoint. It must be unique among the source's endpoints.",
              "type": "string"
            },
            "scheme": {
              "default": "https",
              "description": "The scheme of the protocol.",
              "example": "https",
              "type": "string"
            },
            "source_id": {
              "$ref": "#/components/schemas/ID"
            },
            "updated_at": {
              "description": "The timestamp for when the source was last updated",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "verify_ssl": {
              "default": true,
              "description": "Should the SSL certificate be verified?",
              "example": true,
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "EndpointsCollection": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/EndpointRead"
              },
              "type": "array"
            },
            "links": {
              "$ref": "#/components/schemas/CollectionLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/CollectionMetadata"
            }
          },
          "type": "object"
        },
        "ErrorBadRequest": {
          "description": "Error structure for the \"Bad Request\" responses",
          "properties": {
            "errors": {
              "items": {
                "properties": {
                  "detail": {
                    "description": "Detail of the error",
                    "example": "The provided path parameters are invalid",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of the response",
                    "example": 400,
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ErrorNotFound": {
          "description": "Error structure for the \"Not Found\" responses",
          "properties": {
            "errors": {
              "items": {
                "properties": {
                  "detail": {
                    "description": "Detail of the error",
                    "example": "The resource was not found",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of the response",
                    "example": 404,
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ErrorUnauthorized": {
          "description": "Error structure for the \"Unauthorized\" responses",
          "properties": {
            "errors": {
              "items": {
                "properties": {
                  "detail": {
                    "description": "Detail of the error",
                    "example": "x-rh-identity header missing",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of the response",
                    "example": 401,
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "GraphQLRequest": {
          "properties": {
            "operationName": {
              "default": "",
              "description": "If the Query contains several named operations, the operationName controls which one should be executed",
              "type": "string"
            },
            "query": {
              "default": "{}",
              "description": "The GraphQL query",
              "type": "string"
            },
            "variables": {
              "description": "Optional Query variables",
              "nullable": true,
              "type": "object"
            }
          },
          "required": [
            "query"
          ],
          "type": "object"
        },
        "GraphQLResponse": {
          "properties": {
            "data": {
              "description": "Results from the GraphQL query",
              "type": "object"
            },
            "errors": {
              "description": "Errors resulting from the GraphQL query",
              "items": {
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ID": {
          "description": "ID of the resource",
          "example": "12345",
          "pattern": "^\\d+$",
          "readOnly": true,
          "type": "string"
        },
        "IDW": {
          "description": "ID of the resource. Not \"readonly\", since it might be used for create/update payloads",
          "example": "12345",
          "pattern": "^\\d+$",
          "type": "string"
        },
        "RhcConnectionCollection": {
          "description": "Collection of Red Hat Connector Connections along with the metadata",
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/RhcConnectionRead"
              },
              "type": "array"
            },
            "links": {
              "$ref": "#/components/schemas/CollectionLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/CollectionMetadata"
            }
          },
          "type": "object"
        },
        "RhcConnectionCreate": {
          "properties": {
            "extra": {
              "description": "Extra data in JSON format",
              "example": {
                "hello": "world"
              },
              "type": "object"
            },
            "rhc_id": {
              "description": "The UUID of the connection",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            },
            "source_id": {
              "description": "Hehe",
              "type": "string"
            }
          },
          "type": "object"
        },
        "RhcConnectionRead": {
          "properties": {
            "availability_status": {
              "description": "The availability status of the connection",
              "enum": [
                "available",
                "in_progress",
                "partially_available",
                "unavailable"
              ],
              "example": "available",
              "type": "string"
            },
            "availability_status_error": {
              "description": "The received error message when polling for the availability status",
              "example": "Destination host unreachable",
              "type": "string"
            },
            "extra": {
              "description": "Extra data in JSON format",
              "example": {
                "hello": "world"
              },
              "type": "object"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "last_available_at": {
              "description": "Timestamp of the last time the connection was available",
              "example": "2000-01-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "last_checked_at": {
              "description": "Timestamp of the last time the availability was checked for the connection",
              "example": "2000-01-01T00:00:00Z",
              "format": "date-time",
              "type": "string"
            },
            "rhc_id": {
              "description": "The UUID of the connection",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "readOnly": true,
              "type": "string"
            },
            "source_ids": {
              "description": "The connection's related sources",
              "example": [
                "92",
                "106",
                "231"
              ],
              "items": {
                "$ref": "#/components/schemas/ID"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "RhcConnectionUpdate": {
          "properties": {
            "extra": {
              "description": "Extra data in JSON format",
              "example": {
                "hello": "world"
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "SecretCreate": {
          "properties": {
            "authtype": {
              "description": "Authentication type of the secret",
              "type": "string"
            },
            "extra": {
              "description": "Any extra information you want stored for the secret, in JSON format",
              "type": "object"
            },
            "name": {
              "description": "Name of the secret",
              "type": "string"
            },
            "password": {
              "description": "Password of the secret",
              "type": "string"
            },
            "user_scoped": {
              "description": "Defines whether the secret is created with user ownership. Takes user from header",
              "type": "boolean"
            },
            "username": {
              "description": "Username of the secret",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SecretEdit": {
          "description": "The payload that the backend accepts when editing a Secret",
          "properties": {
            "extra": {
              "description": "Any extra information you want stored for the secret, in JSON format",
              "type": "object"
            },
            "password": {
              "description": "Password of the secret",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SecretRead": {
          "properties": {
            "authtype": {
              "description": "Authentication type of the secret",
              "readOnly": true,
              "type": "string"
            },
            "extra": {
              "description": "Any extra information you want stored for the secret, in JSON format",
              "type": "object"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "name": {
              "description": "Name of the secret",
              "readOnly": true,
              "type": "string"
            },
            "username": {
              "description": "Username of the secret",
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "SecretsCollection": {
          "description": "An array containing Secret objects",
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/SecretRead"
              },
              "type": "array"
            },
            "links": {
              "$ref": "#/components/schemas/CollectionLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/CollectionMetadata"
            }
          },
          "type": "object"
        },
        "Source": {
          "additionalProperties": false,
          "properties": {
            "app_creation_workflow": {
              "enum": [
                "manual_configuration",
                "account_authorization"
              ],
              "readOnly": true,
              "type": "string"
            },
            "availability_status": {
              "description": "The availability status of the source",
              "enum": [
                "available",
                "in_progress",
                "partially_available",
                "unavailable"
              ],
              "example": "available",
              "type": "string"
            },
            "created_at": {
              "description": "The timestamp for when the source was created.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "imported": {
              "description": "Was the source imported?",
              "example": "true",
              "type": "string"
            },
            "last_available_at": {
              "description": "The timestamp for when the source was last available at.",
              "format": "date-time",
              "type": "string"
            },
            "last_checked_at": {
              "description": "The timestamp for when the source was last checked at for the availability status.",
              "format": "date-time",
              "type": "string"
            },
            "name": {
              "description": "The name of the source",
              "example": "My shiny source",
              "type": "string"
            },
            "paused_at": {
              "description": "The timestamp for when the source was paused",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "source_ref": {
              "description": "The external referece or ID for the source",
              "example": "my-long-external-ref",
              "type": "string"
            },
            "source_type_id": {
              "$ref": "#/components/schemas/ID"
            },
            "uid": {
              "description": "Unique ID of the inventory source installation",
              "example": "my-long-uuid",
              "readOnly": true,
              "type": "string"
            },
            "updated_at": {
              "description": "The timestamp for when the source was last updated",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "version": {
              "description": "The version of the source",
              "example": "1.2.3",
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "SourceCreate": {
          "description": "The payload that the back end accepts when creating a source",
          "properties": {
            "app_creation_workflow": {
              "description": "The way the source is going to be created: manually, or using superkey?",
              "enum": [
                "manual_configuration",
                "account_authorization"
              ],
              "type": "string"
            },
            "availability_status": {
              "description": "The availability status of the source",
              "enum": [
                "available",
                "in_progress",
                "partially_available",
                "unavailable"
              ],
              "example": "available",
              "type": "string"
            },
            "imported": {
              "description": "Was the source imported?",
              "example": "true",
              "type": "string"
            },
            "name": {
              "description": "The name of the source",
              "example": "My shiny source",
              "type": "string"
            },
            "source_ref": {
              "description": "The external referece or ID for the source",
              "example": "my-long-external-ref",
              "type": "string"
            },
            "source_type_id": {
              "description": "The ID of the source type",
              "example": "12345",
              "pattern": "^\\d+$",
              "type": "string"
            },
            "uid": {
              "description": "Unique ID of the inventory source installation",
              "example": "my-long-uuid",
              "type": "string"
            },
            "version": {
              "description": "The version of the source",
              "example": "1.2.3",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SourceEdit": {
          "description": "The payload that the back end accepts when editing a source",
          "properties": {
            "availability_status": {
              "description": "The availability status of the source",
              "enum": [
                "available",
                "in_progress",
                "partially_available",
                "unavailable"
              ],
              "example": "available",
              "type": "string"
            },
            "imported": {
              "description": "Was the source imported?",
              "example": "true",
              "type": "string"
            },
            "last_available_at": {
              "description": "The timestamp of the last time the source was seen as available",
              "format": "date-time",
              "type": "string"
            },
            "last_checked_at": {
              "description": "The timestamp of the last time the source was checked for the availability status",
              "format": "date-time",
              "type": "string"
            },
            "name": {
              "description": "The name of the source",
              "example": "My shiny source",
              "type": "string"
            },
            "source_ref": {
              "description": "The external referece or ID for the source",
              "example": "my-long-external-ref",
              "type": "string"
            },
            "version": {
              "description": "The version of the source",
              "example": "1.2.3",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SourceType": {
          "properties": {
            "category": {
              "description": "The category of this source type",
              "example": "Cloud",
              "type": "string"
            },
            "created_at": {
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "icon_url": {
              "description": "The icon's URL for this source type",
              "example": "https://example.com/icons/example-st.svg",
              "type": "string"
            },
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "name": {
              "description": "The name of the source type",
              "example": "openshift",
              "type": "string"
            },
            "product_name": {
              "description": "The name of the product",
              "example": "OpenShift",
              "type": "string"
            },
            "schema": {
              "description": "The schema for the front end to interpret how to show this source type",
              "type": "object"
            },
            "updated_at": {
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "vendor": {
              "description": "The vendor that developed this product",
              "example": "Red Hat",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SourceTypesCollection": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/SourceType"
              },
              "type": "array"
            },
            "links": {
              "$ref": "#/components/schemas/CollectionLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/CollectionMetadata"
            }
          },
          "type": "object"
        },
        "SourcesCollection": {
          "description": "An array containing source objects",
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/Source"
              },
              "type": "array"
            },
            "links": {
              "$ref": "#/components/schemas/CollectionLinks"
            },
            "meta": {
              "$ref": "#/components/schemas/CollectionMetadata"
            }
          },
          "type": "object"
        }
      },
      "securitySchemes": {
        "Authorization": {
          "in": "header",
          "name": "Authorization",
          "type": "apiKey"
        },
        "basic-auth": {
          "description": "Basic authentication. Required for the \"stage\" and \"production\" environments",
          "scheme": "basic",
          "type": "http"
        },
        "x-rh-sources-account-number": {
          "description": "EBS account number to identify the tenant. Warning: it's being deprecated",
          "in": "header",
          "name": "x-rh-sources-account-number",
          "type": "apiKey"
        },
        "x-rh-sources-org-id": {
          "description": "OrgId value to identify the tenant",
          "in": "header",
          "name": "x-rh-sources-org-id",
          "type": "apiKey"
        }
      }
    },
    "info": {
      "contact": {
        "email": "support@redhat.com"
      },
      "description": "Sources",
      "license": {
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "title": "Sources",
      "version": "3.1.0"
    },
    "openapi": "3.0.0",
    "paths": {
      "/app_meta_data": {
        "get": {
          "description": "Returns an array of AppMetaData objects",
          "operationId": "listAllAppMetaData",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AppMetaDataCollection"
                  }
                }
              },
              "description": "AppMetaData collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "List AppMetaData",
          "tags": [
            "app metadata"
          ]
        }
      },
      "/app_meta_data/{id}": {
        "get": {
          "description": "Returns a AppMetaData object",
          "operationId": "showAppMetaData",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AppMetaData"
                  }
                }
              },
              "description": "AppMetaData info"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Show an existing AppMetaData",
          "tags": [
            "app metadata"
          ]
        }
      },
      "/application_authentications": {
        "get": {
          "description": "Returns an array of ApplicationAuthentication objects",
          "operationId": "listAllApplicationAuthentications",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApplicationAuthenticationsCollection"
                  }
                }
              },
              "description": "ApplicationAuthentications collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "List ApplicationAuthentications",
          "tags": [
            "application authentications"
          ]
        },
        "post": {
          "description": "Creates a ApplicationAuthentication object",
          "operationId": "createApplicationAuthentication",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationAuthenticationCreate"
                }
              }
            },
            "description": "ApplicationAuthentication attributes to create",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApplicationAuthentication"
                  }
                }
              },
              "description": "ApplicationAuthentication creation successful"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "Create a new ApplicationAuthentication",
          "tags": [
            "application authentications"
          ]
        }
      },
      "/application_authentications/{id}": {
        "delete": {
          "description": "Deletes a ApplicationAuthentication object",
          "operationId": "deleteApplicationAuthentication",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "ApplicationAuthentication deleted"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Delete an existing ApplicationAuthentication",
          "tags": [
            "application authentications"
          ]
        },
        "get": {
          "description": "Returns a ApplicationAuthentication object",
          "operationId": "showApplicationAuthentication",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApplicationAuthenticationRead"
                  }
                }
              },
              "description": "ApplicationAuthentication info"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Show an existing ApplicationAuthentication",
          "tags": [
            "application authentications"
          ]
        }
      },
      "/application_types": {
        "get": {
          "description": "Returns an array of ApplicationType objects",
          "operationId": "listApplicationTypes",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApplicationTypesCollection"
                  }
                }
              },
              "description": "ApplicationTypes collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "List ApplicationTypes",
          "tags": [
            "application types"
          ]
        }
      },
      "/application_types/{id}": {
        "get": {
          "description": "Returns an ApplicationType object",
          "operationId": "showApplicationType",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApplicationType"
                  }
                }
              },
              "description": "ApplicationType info"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Show an existing ApplicationType",
          "tags": [
            "application types"
          ]
        }
      },
      "/application_types/{id}/app_meta_data": {
        "get": {
          "description": "Returns an array of AppMetaData objects",
          "operationId": "listApplicationTypeAppMetaData",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            },
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AppMetaDataCollection"
                  }
                }
              },
              "description": "AppMetaData collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List AppMetaData for ApplicationType",
          "tags": [
            "application types"
          ]
        }
      },
      "/application_types/{id}/sources": {
        "get": {
          "description": "Returns an array of Source objects",
          "operationId": "listApplicationTypeSources",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            },
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SourcesCollection"
                  }
                }
              },
              "description": "Sources collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List the Sources for a given ApplicationType",
          "tags": [
            "application types"
          ]
        }
      },
      "/applications": {
        "get": {
          "description": "Returns an array of Application objects",
          "operationId": "listApplications",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApplicationsCollection"
                  }
                }
              },
              "description": "Applications collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "List Applications",
          "tags": [
            "applications"
          ]
        },
        "post": {
          "description": "Creates a Application object",
          "operationId": "createApplication",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationCreate"
                }
              }
            },
            "description": "Application attributes to create",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              },
              "description": "Application creation successful"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "Create a new Application",
          "tags": [
            "applications"
          ]
        }
      },
      "/applications/{id}": {
        "delete": {
          "description": "Deletes a Application object",
          "operationId": "deleteApplication",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "Application deleted"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Delete an existing Application",
          "tags": [
            "applications"
          ]
        },
        "get": {
          "description": "Returns a Application object",
          "operationId": "showApplication",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              },
              "description": "Application info"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Show an existing Application",
          "tags": [
            "applications"
          ]
        },
        "patch": {
          "description": "Updates a Application object.\n\nIn the case which the appplication is paused then the allowed attributes for updating are:\n\n `availability_status`, `availability_status_error`, `last_available_at` and `last_checked_at`",
          "operationId": "updateApplication",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUpdate"
                }
              }
            },
            "description": "Application attributes to update",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              },
              "description": "The updated application"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Update an existing Application",
          "tags": [
            "applications"
          ]
        }
      },
      "/applications/{id}/authentications": {
        "get": {
          "description": "Returns an array of Authentication objects",
          "operationId": "listApplicationAuthentications",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            },
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationsCollection"
                  }
                }
              },
              "description": "Authentications collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List Authentications for Application",
          "tags": [
            "applications"
          ]
        }
      },
      "/applications/{id}/pause": {
        "post": {
          "description": "Pauses an Application",
          "operationId": "pauseApplication",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "Application Paused"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Pauses an Application",
          "tags": [
            "applications"
          ]
        }
      },
      "/applications/{id}/unpause": {
        "post": {
          "description": "Unpauses an Application",
          "operationId": "unpauseApplication",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "Application Un-Paused"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Unpauses an Application",
          "tags": [
            "applications"
          ]
        }
      },
      "/applications_authentications/{id}/authentications": {
        "get": {
          "description": "Returns an array of authentications",
          "operationId": "listApplicationAuthenticationsAuthentications",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            },
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationRead"
                  }
                }
              },
              "description": "Authentications for the given application authentication"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List authentications for the given application authentication",
          "tags": [
            "application authentications"
          ]
        }
      },
      "/authentications": {
        "get": {
          "description": "Returns an array of Authentication objects",
          "operationId": "listAuthentications",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationsCollection"
                  }
                }
              },
              "description": "Authentications collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "List Authentications",
          "tags": [
            "authentications"
          ]
        },
        "post": {
          "description": "Creates an Authentication object",
          "operationId": "createAuthentication",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationCreate"
                }
              }
            },
            "description": "Authentication attributes to create",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationRead"
                  }
                }
              },
              "description": "Authentication creation successful"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "Create a new Authentication",
          "tags": [
            "authentications"
          ]
        }
      },
      "/authentications/{id}": {
        "delete": {
          "description": "Deletes an Authentication object",
          "operationId": "deleteAuthentication",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "Authentication deleted"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Delete an existing Authentication",
          "tags": [
            "authentications"
          ]
        },
        "get": {
          "description": "Returns an Authentication object",
          "operationId": "showAuthentication",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationRead"
                  }
                }
              },
              "description": "Authentication object"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Show an existing Authentication",
          "tags": [
            "authentications"
          ]
        },
        "patch": {
          "description": "Updates an Authentication object.\n\nIn the case of the authentication being paused, the allowed attributes to be updated are:\n\n `availability_status`, `availability_status_error`, `last_checked_at` and `last_available_at`",
          "operationId": "updateAuthentication",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationEdit"
                }
              }
            },
            "description": "Authentication attributes to update",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationRead"
                  }
                }
              },
              "description": "The updated authentication"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Update an existing Authentication",
          "tags": [
            "authentications"
          ]
        }
      },
      "/bulk_create": {
        "post": {
          "description": "Bulk-create a source and the specified sub-resources",
          "operationId": "bulkCreate",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkCreatePayload"
                }
              }
            }
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkCreateResponse"
                  }
                }
              },
              "description": "Resources created"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorBadRequest"
                  }
                }
              },
              "description": "Bad Request"
            }
          },
          "summary": "Bulk-create resources",
          "tags": [
            "sources"
          ]
        }
      },
      "/endpoints": {
        "get": {
          "description": "Returns an array of Endpoint objects",
          "operationId": "listEndpoints",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EndpointsCollection"
                  }
                }
              },
              "description": "Endpoints collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "List Endpoints",
          "tags": [
            "endpoints"
          ]
        },
        "post": {
          "description": "Creates a Endpoint object",
          "operationId": "createEndpoint",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointCreate"
                }
              }
            },
            "description": "Endpoint attributes to create",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Endpoint"
                  }
                }
              },
              "description": "Endpoint creation successful"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "Create a new Endpoint",
          "tags": [
            "endpoints"
          ]
        }
      },
      "/endpoints/{id}": {
        "delete": {
          "description": "Deletes an Endpoint",
          "operationId": "deleteEndpoint",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "Endpoint deleted"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Delete an existing Endpoint",
          "tags": [
            "endpoints"
          ]
        },
        "get": {
          "description": "Returns an Endpoint object",
          "operationId": "showEndpoint",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EndpointRead"
                  }
                }
              },
              "description": "Endpoint info"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Show an existing Endpoint",
          "tags": [
            "endpoints"
          ]
        },
        "patch": {
          "description": "Updates a Endpoint object.\n\nIn the case of the endpoint being paused, the allowed attributes to be updated are:\n\n `availability_status`, `availability_status_error`, `last_checked_at` and `last_available_at`",
          "operationId": "updateEndpoint",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointEdit"
                }
              }
            },
            "description": "Endpoint attributes to update",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EndpointRead"
                  }
                }
              },
              "description": "The updated endpoint"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Update an existing Endpoint",
          "tags": [
            "endpoints"
          ]
        }
      },
      "/endpoints/{id}/authentications": {
        "get": {
          "description": "Returns an array of Authentication objects",
          "operationId": "listEndpointAuthentications",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            },
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationsCollection"
                  }
                }
              },
              "description": "Authentications collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List Authentications for a given Endpoint",
          "tags": [
            "endpoints"
          ]
        }
      },
      "/graphql": {
        "post": {
          "description": "Performs a GraphQL Query",
          "operationId": "postGraphQL",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphQLRequest"
                }
              }
            },
            "description": "GraphQL Query Request",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GraphQLResponse"
                  }
                }
              },
              "description": "GraphQL Query Response"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "Perform a GraphQL Query"
        }
      },
      "/openapi.json": {
        "get": {
          "operationId": "getDocumentation",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "The API document for this version of the API"
            }
          },
          "summary": "Return this API document in JSON format"
        }
      },
      "/rhc_connections": {
        "get": {
          "description": "Returns an array of Red Hat Connector Connections",
          "operationId": "getRhcConnections",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RhcConnectionCollection"
                  }
                }
              },
              "description": "RHC Connections collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "List RHC Connections",
          "tags": [
            "rhc-connections"
          ]
        },
        "post": {
          "description": "Create a new Red Hat Connector Connection",
          "operationId": "postRhcConnection",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RhcConnectionCreate"
                }
              }
            }
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RhcConnectionRead"
                  }
                }
              },
              "description": "Connection created"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "Create a new RHC Connection",
          "tags": [
            "rhc-connections"
          ]
        }
      },
      "/rhc_connections/{id}": {
        "delete": {
          "description": "Deletes a Red Hat Connector Connection",
          "operationId": "deleteRhcConnection",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "The connection has been deleted"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Delete an RHC Connection",
          "tags": [
            "rhc-connections"
          ]
        },
        "get": {
          "description": "Returns a single Red Hat Connector Connection",
          "operationId": "getRhcConnection",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RhcConnectionRead"
                  }
                }
              },
              "description": "Red Hat Connector connection object"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Get an existing RHC Connection",
          "tags": [
            "rhc-connections"
          ]
        },
        "patch": {
          "description": "Updates a Red Hat Connector Connection",
          "operationId": "updateRhcConnection",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RhcConnectionUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RhcConnectionRead"
                  }
                }
              },
              "description": "Red Hat Connector connection object"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Update an RHC Connection",
          "tags": [
            "rhc-connections"
          ]
        }
      },
      "/rhc_connections/{id}/sources": {
        "get": {
          "description": "Returns an array of sources related to the provided Red Hat Connector Connection",
          "operationId": "getRhcConnectionSources",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            },
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SourcesCollection"
                  }
                }
              },
              "description": "Sources collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List sources related to an RHC Connection",
          "tags": [
            "rhc-connections"
          ]
        }
      },
      "/secrets": {
        "get": {
          "description": "Returns an array of secrets",
          "operationId": "listSecrets",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SecretsCollection"
                  }
                }
              },
              "description": "Secrets collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "List Secrets",
          "tags": [
            "secrets"
          ]
        },
        "post": {
          "description": "Create a secret with desired credentials",
          "operationId": "createSecret",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretCreate"
                }
              }
            },
            "description": "Secret attributes",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SecretRead"
                  }
                }
              },
              "description": "Resources created"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorBadRequest"
                  }
                }
              },
              "description": "Bad Request"
            }
          },
          "summary": "Create secret",
          "tags": [
            "secrets"
          ]
        }
      },
      "/secrets/{id}": {
        "delete": {
          "description": "Deletes a secret",
          "operationId": "deleteSecret",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "Secret deleted"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Delete an existing secret",
          "tags": [
            "secrets"
          ]
        },
        "get": {
          "description": "Returns a secret object",
          "operationId": "showSecret",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SecretRead"
                  }
                }
              },
              "description": "The requested secrets' payload"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Get a secret",
          "tags": [
            "secrets"
          ]
        },
        "patch": {
          "description": "Updates a secret object.\n\nAllowed attributes to be updated are `extra` and `password`.",
          "operationId": "updateSecret",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretEdit"
                }
              }
            },
            "description": "Secret attributes to update",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SecretRead"
                  }
                }
              },
              "description": "The updated secrets' payload"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorBadRequest"
                  }
                }
              },
              "description": "Bad request. Please check that you are not trying to update unpermitted parameters."
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Update an existing secret",
          "tags": [
            "secrets"
          ]
        }
      },
      "/source_types": {
        "get": {
          "description": "Returns an array of SourceType objects",
          "operationId": "listSourceTypes",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SourceTypesCollection"
                  }
                }
              },
              "description": "SourceTypes collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "List SourceTypes",
          "tags": [
            "source types"
          ]
        }
      },
      "/source_types/{id}": {
        "get": {
          "description": "Returns a SourceType object",
          "operationId": "showSourceType",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SourceType"
                  }
                }
              },
              "description": "SourceType info"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Show an existing SourceType",
          "tags": [
            "source types"
          ]
        }
      },
      "/source_types/{id}/sources": {
        "get": {
          "description": "Returns an array of Source objects",
          "operationId": "listSourceTypeSources",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            },
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SourcesCollection"
                  }
                }
              },
              "description": "Sources collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List Sources for SourceType",
          "tags": [
            "source types"
          ]
        }
      },
      "/sources": {
        "get": {
          "description": "Returns an array of Source objects",
          "operationId": "listSources",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SourcesCollection"
                  }
                }
              },
              "description": "Sources collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          },
          "summary": "List Sources",
          "tags": [
            "sources"
          ]
        },
        "post": {
          "description": "Creates a Source object",
          "operationId": "createSource",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCreate"
                }
              }
            },
            "description": "Source attributes to create",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Source"
                  }
                }
              },
              "description": "Source creation successful"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorBadRequest"
                  }
                }
              },
              "description": "The payload is not valid"
            }
          },
          "summary": "Create a new Source",
          "tags": [
            "sources"
          ]
        }
      },
      "/sources/{id}": {
        "delete": {
          "description": "Deletes a source and all its sub resources",
          "operationId": "deleteSource",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "Source and subresources deleted"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Delete an existing Source",
          "tags": [
            "sources"
          ]
        },
        "get": {
          "description": "Returns a source object",
          "operationId": "showSource",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Source"
                  }
                }
              },
              "description": "The requested source's payload"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Get a source",
          "tags": [
            "sources"
          ]
        },
        "patch": {
          "description": "Updates a Source object.\n\nIn the case of the source being paused, the allowed attributes to be updated are:\n\n `availability_status`, `last_checked_at` and `last_available_at`",
          "operationId": "updateSource",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceEdit"
                }
              }
            },
            "description": "Source attributes to update",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Source"
                  }
                }
              },
              "description": "The updated source's payload"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorBadRequest"
                  }
                }
              },
              "description": "Bad request. Please check that the source is not paused since you might be trying to update unpermitted parameters."
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Update an existing Source",
          "tags": [
            "sources"
          ]
        }
      },
      "/sources/{id}/application_types": {
        "get": {
          "description": "Returns an array of ApplicationType objects",
          "operationId": "listSourceApplicationTypes",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            },
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApplicationTypesCollection"
                  }
                }
              },
              "description": "ApplicationTypes collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List ApplicationTypes for Source",
          "tags": [
            "sources"
          ]
        }
      },
      "/sources/{id}/applications": {
        "get": {
          "description": "Returns an array of Application objects",
          "operationId": "listSourceApplications",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            },
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApplicationsCollection"
                  }
                }
              },
              "description": "Applications collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List Applications for Source",
          "tags": [
            "sources"
          ]
        }
      },
      "/sources/{id}/authentications": {
        "get": {
          "description": "Returns an array of Authentication objects",
          "operationId": "listSourceAuthentications",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            },
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationsCollection"
                  }
                }
              },
              "description": "Authentications collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List Authentications for Source",
          "tags": [
            "sources"
          ]
        }
      },
      "/sources/{id}/check_availability": {
        "post": {
          "description": "Checks Availability of a Source",
          "operationId": "checkAvailabilitySource",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "202": {
              "description": "Availability Check Accepted"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Checks Availability of a Source",
          "tags": [
            "sources"
          ]
        }
      },
      "/sources/{id}/endpoints": {
        "get": {
          "description": "Returns an array of Endpoint objects",
          "operationId": "listSourceEndpoints",
          "parameters": [
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            },
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EndpointsCollection"
                  }
                }
              },
              "description": "Endpoints collection"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List Endpoints for Source",
          "tags": [
            "sources"
          ]
        }
      },
      "/sources/{id}/pause": {
        "post": {
          "description": "Pauses a source and all its dependant applications",
          "operationId": "pauseSource",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "Source and its applications have been paused"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Pause a source and its applications",
          "tags": [
            "sources"
          ]
        }
      },
      "/sources/{id}/rhc_connections": {
        "get": {
          "description": "Returns an array of Red Hat Connector Connections related to the provided source",
          "operationId": "getSourcesRhcConnection",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            },
            {
              "$ref": "#/components/parameters/QueryLimit"
            },
            {
              "$ref": "#/components/parameters/QueryOffset"
            },
            {
              "$ref": "#/components/parameters/QueryFilter"
            },
            {
              "$ref": "#/components/parameters/QuerySortBy"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RhcConnectionCollection"
                  }
                }
              },
              "description": "Red Hat Connector Collections"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "List RHC Connections related to a source",
          "tags": [
            "sources"
          ]
        }
      },
      "/sources/{id}/unpause": {
        "post": {
          "description": "Unpauses a Source and all its dependant applications",
          "operationId": "unpauseSource",
          "parameters": [
            {
              "$ref": "#/components/parameters/ID"
            }
          ],
          "responses": {
            "204": {
              "description": "Source and its applications unpaused"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "summary": "Unpauses a source and its applications",
          "tags": [
            "sources"
          ]
        }
      }
    },
    "security": [
      {
        "basic-auth": []
      },
      {
        "x-rh-identity": []
      },
      {
        "x-rh-sources-org-id": []
      },
      {
        "x-rh-sources-account-number": []
      }
    ],
    "servers": [
      {
        "description": "Production Server",
        "url": "https://console.redhat.com/{basePath}",
        "variables": {
          "basePath": {
            "default": "api/sources/v3.1"
          }
        }
      },
      {
        "description": "Staging Server",
        "url": "https://console.stage.redhat.com/{basePath}",
        "variables": {
          "basePath": {
            "default": "api/sources/v3.1"
          }
        }
      },
      {
        "description": "Development Server",
        "url": "http://localhost:{port}/{basePath}",
        "variables": {
          "basePath": {
            "default": "api/sources/v3.1"
          },
          "port": {
            "default": "3000"
          }
        }
      }
    ],
    "tags": [
      {
        "description": "Endpoints related to application metadata",
        "name": "app metadata"
      },
      {
        "description": "Endpoints related to applications",
        "name": "applications"
      },
      {
        "description": "Endpoints related to application authentications",
        "name": "application authentications"
      },
      {
        "description": "Endpoints related to application types",
        "name": "application types"
      },
      {
        "description": "Endpoints related to authentication",
        "name": "authentications"
      },
      {
        "description": "Endpoints related to endpoints",
        "name": "endpoints"
      },
      {
        "description": "Endpoints related to Red Hat Connector Connecctions",
        "name": "rhc-connections"
      },
      {
        "description": "Endpoints related to sources",
        "name": "sources"
      },
      {
        "description": "Endpoints related to source types",
        "name": "source types"
      },
      {
        "description": "Endpoints related to secrets",
        "name": "secrets"
      }
    ]
  }
}