{
  "components": {
    "examples": {
      "400CreationExample": {
        "value": {
          "code": "CONNECTOR-MGMT-103",
          "href": "/api/connector_mgmt/v1/errors/103",
          "id": "103",
          "kind": "Error",
          "operation_id": "1iWIimqGcrDuL61aUxIZqBTqNRa",
          "reason": "Synchronous action is not supported, use async=true parameter"
        }
      },
      "400InvalidQueryExample": {
        "value": {
          "code": "CONNECTOR-MGMT-23",
          "href": "/api/connector_mgmt/v1/errors/23",
          "id": "203",
          "kind": "Error",
          "operation_id": "1lWDGuybIrEnxrAem724gqkkiDv",
          "reason": "Failed to parse search query: Unable to list Kafka requests for api_kafka_service: CONNECTOR-MGMT-23:\nFailed to parse search query: Unsupported column name for search: 'id'. Supported column names are:\nregion, name, cloud_provider, name, status. Query invalid: id = 123\n"
        }
      },
      "401Example": {
        "value": {
          "code": "CONNECTOR-MGMT-11",
          "href": "/api/connector_mgmt/v1/errors/11",
          "id": "11",
          "kind": "Error",
          "operation_id": "1iY3UhEhwmXBpWPfI2lNekpd4ZD",
          "reason": "Unable to verify JWT token: Required authorization token not found"
        }
      },
      "404DeleteExample": {
        "value": {
          "code": "CONNECTOR-MGMT-7",
          "href": "/api/connector_mgmt/v1/errors/7",
          "id": "7",
          "kind": "Error",
          "operation_id": "1iYO7g2g6HTdUKUa2ksH82kQD3y",
          "reason": "Connector with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found"
        }
      },
      "404Example": {
        "value": {
          "code": "CONNECTOR-MGMT-7",
          "href": "/api/connector_mgmt/v1/errors/7",
          "id": "404",
          "kind": "Error",
          "reason": "The requested resource doesn't exist"
        }
      },
      "409Example": {
        "value": {
          "code": "CONNECTOR-MGMT-21",
          "href": "/api/connector_mgmt/v1/errors/21",
          "id": "409",
          "kind": "Error",
          "reason": "An attempt was made to modify an immutable field"
        }
      },
      "409NameConflictExample": {
        "value": {
          "code": "CONNECTOR-MGMT-36",
          "href": "/api/connector_mgmt/v1/errors/36",
          "id": "36",
          "kind": "Error",
          "operation_id": "6kY0UiEkzkXCzWPeI2oYehd3ED",
          "reason": "Conenctor name is already used"
        }
      },
      "410Example": {
        "value": {
          "code": "CONNECTOR-MGMT-25",
          "href": "/api/connector_mgmt/v1/errors/25",
          "id": "410",
          "kind": "Error",
          "reason": "The requested resource has been deleted"
        }
      },
      "500DeleteExample": {
        "value": {
          "code": "CONNECTOR-MGMT-9",
          "href": "/api/connector_mgmt/v1/errors/9",
          "id": "9",
          "kind": "Error",
          "operation_id": "1iYTsWry6nsqb2sNmFj5bXpD7Ca",
          "reason": "Error deleting syncset: OCM-EX-9: failed to delete syncset: ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e\nfor cluster id: 1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier\nis '404', code is 'CLUSTERS-MGMT-404' and operation identifier is '1g5or50viu07oealuehrkc26dgftj1ac':\nCluster '1g5d88q0lrcdv4g7alb7slfgnj3dhbsj' not found)\n"
        }
      },
      "500Example": {
        "value": {
          "code": "CONNECTOR-MGMT-9",
          "href": "/api/connector_mgmt/v1/errors/9",
          "id": "9",
          "kind": "Error",
          "operation_id": "1ieELvF9jMQY6YghfM9gGRsHvEW",
          "reason": "Unspecified error"
        }
      },
      "ConnectorClusterCreateExample": {
        "value": {
          "name": "MyCluster"
        }
      },
      "ConnectorCreateExample": {
        "value": {
          "channel": "stable",
          "connector": {
            "common": {
              "multi_lines": true,
              "show_all": true
            },
            "data_shape": {
              "key": {
                "format": "STRING"
              },
              "value": {
                "format": "JSON"
              }
            },
            "processors": [
              {
                "insert_field": {
                  "name": "fieldName",
                  "value": "fieldValue"
                }
              }
            ],
            "topics": "foo,bar"
          },
          "connector_type_id": "log_sink_0.1",
          "desired_state": "ready",
          "error_handling": {
            "dead_letter_queue": {
              "topic": "dlq"
            }
          },
          "kafka": {
            "client_id": "srvc-acct-162ef2d8-0209-4117-8462-df63c2025c26",
            "client_secret": "b144d991-08eb-4472-8ec1-eb034c69231b",
            "id": "9bsv0s6brfr002pfnkh0",
            "url": "foo-9bsv0s6brfr002pfnkh0.kas.acme.com:443"
          },
          "name": "MyLogger",
          "namespace_id": "9bsv0s7tne7g02gh5g4g",
          "schema_registry": {
            "client_id": "srvc-acct-e025265e-a88a-44fb-8450-ed010eb6bc5c",
            "client_secret": "dc5a8298-bed7-422e-8947-f6fda69292ff",
            "id": "9bsv0s0k8lng031se9q0",
            "url": "bar-9bsv0s2mfca002t9q7sg.srs.acme.com:443"
          },
          "service_account": {
            "client_id": "SA-121212",
            "client_secret": "secret"
          }
        }
      },
      "ConnectorNamespaceCreateExample": {
        "value": {
          "annotations": {
            "cos.bf2.org/profile": "default-profile"
          },
          "cluster_id": "9bsv0s7tne7g02gh5g4g",
          "name": "MyNamespace"
        }
      },
      "ConnectorNamespaceEvalCreateExample": {
        "value": {
          "annotations": {
            "cos.bf2.org/profile": "evaluation-profile"
          },
          "name": "MyEvalNamespace"
        }
      },
      "ConnectorTypeExample": {
        "value": {
          "annotations": [
            {
              "cos.bf2.org/name": "value"
            }
          ],
          "capabilities": [
            "data_shape",
            "processors"
          ],
          "channels": [
            "stable"
          ],
          "description": "Log Sink",
          "href": "/api/connector_mgmt/v1/kafka_connector_types/log_sink_0.1",
          "icon_href": "/api/connector_mgmt/v1/kafka_connector_types/log_sink.png",
          "id": "log_sink_0.1",
          "kind": "ConnectorType",
          "labels": [
            "sink"
          ],
          "name": "Log Sink",
          "schema": {
            "properties": {
              "common": {
                "properties": {
                  "multi_line": {
                    "default": false,
                    "description": "Multi Line",
                    "title": "Multi Line",
                    "type": "boolean",
                    "x-group": "endpoint"
                  },
                  "show_all": {
                    "default": false,
                    "description": "Show All",
                    "title": "Show All",
                    "type": "boolean",
                    "x-group": "endpoint"
                  }
                },
                "required": [],
                "title": "Log",
                "type": "object"
              },
              "steps": {
                "items": {
                  "oneOf": [
                    {
                      "properties": {
                        "insert_field": {
                          "description": "Adds a custom field with a constant value to the message in transit.",
                          "properties": {
                            "field": {
                              "description": "The name of the field to be added",
                              "title": "Field",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value of the field",
                              "title": "Value",
                              "type": "string"
                            }
                          },
                          "required": [
                            "field",
                            "value"
                          ],
                          "title": "Insert Field Action",
                          "type": "object"
                        }
                      },
                      "required": [
                        "insert_field"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "extract_field": {
                          "description": "Extract a field from the body",
                          "properties": {
                            "field": {
                              "description": "The name of the field to be added",
                              "title": "Field",
                              "type": "string"
                            }
                          },
                          "required": [
                            "field"
                          ],
                          "title": "Extract Field Action",
                          "type": "object"
                        }
                      },
                      "required": [
                        "extract_field"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "has_header_filter": {
                          "description": "Filter based on the presence of one header",
                          "properties": {
                            "name": {
                              "description": "The header name to evaluate",
                              "example": "headerName",
                              "title": "Header Name",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "title": "Has Header Filter Action",
                          "type": "object"
                        }
                      },
                      "required": [
                        "has_header_filter"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              "topics": {
                "description": "Comma separated list of Kafka topic names",
                "title": "Topic names",
                "type": "string",
                "x-group": "kafka"
              }
            }
          },
          "version": "0.1"
        }
      }
    },
    "parameters": {
      "id": {
        "description": "The ID of record",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "orderBy": {
        "description": "Specifies the order by criteria. The syntax of this parameter is\nsimilar to the syntax of the `order by` clause of an SQL statement.\nEach query can be ordered by any of the underlying resource fields supported in the search parameter.\nFor example, to return all Connector types ordered by their name, use the following syntax:\n\n```sql\nname asc\n```\n\nTo return all Connector types ordered by their name _and_ version, use the following syntax:\n\n```sql\nname asc, version asc\n```\n\nTo return connector types with labels `category-featured` AND `source`, use the following syntax:\n\n```\nlabel like %25category-featured%25source%\n```\n\nNOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match\nan aggregated list of ',' separated label names.\n\nIf the parameter isn't provided, or if the value is empty, then\nthe results are ordered by name.",
        "examples": {
          "orderBy": {
            "value": "name asc"
          }
        },
        "explode": true,
        "in": "query",
        "name": "orderBy",
        "required": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "page": {
        "description": "Page index",
        "examples": {
          "page": {
            "value": "1"
          }
        },
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "search": {
        "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the `where` clause of a\nSQL statement.\n\nAllowed fields in the search depend on the resource type:\n\n* Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id\n* Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state\n* Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier\n* Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url\n\nAllowed operators are `<>`, `=`, `IN`, `NOT IN`, `LIKE`, or `ILIKE`.\nAllowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\nExamples:\n\nTo return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n```\nname = aws-sqs-source and channel = stable\n```\n\nTo return a connector instance with a name that starts with `aws`, use the following syntax:\n\n```\nname like aws%25\n```\n\nTo return a connector type with a name containing `aws` matching any character case combination, use the following syntax:\n\n```\nname ilike %25aws%25\n```\n\nTo return connector types with labels `category-featured` AND `source`, use the following syntax:\n\n```\nlabel like %25category-featured%25source%\n```\n\nNOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match\nan aggregated list of ',' separated label names.\n\nIf the parameter isn't provided, or if the value is empty, then all the resources\nthat the user has permission to see are returned.\n\nNote. If the query is invalid, an error is returned.\n",
        "examples": {
          "search": {
            "value": "name = aws-sqs-source and channel = stable"
          }
        },
        "explode": true,
        "in": "query",
        "name": "search",
        "required": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "size": {
        "description": "Number of items in each page",
        "examples": {
          "size": {
            "value": "100"
          }
        },
        "in": "query",
        "name": "size",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "AddonParameter": {
        "description": "A addon parameter",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddonParameterList": {
        "description": "A list of addon parameters",
        "items": {
          "$ref": "#/components/schemas/AddonParameter"
        },
        "type": "array"
      },
      "Channel": {
        "default": "stable",
        "enum": [
          "stable"
        ],
        "type": "string"
      },
      "Connector": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "$ref": "#/components/schemas/ConnectorMeta"
          },
          {
            "$ref": "#/components/schemas/ConnectorConfiguration"
          },
          {
            "$ref": "#/components/schemas/ConnectorStatus"
          }
        ]
      },
      "ConnectorCluster": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "$ref": "#/components/schemas/ConnectorClusterMeta"
          },
          {
            "$ref": "#/components/schemas/ConnectorClusterStatus"
          }
        ]
      },
      "ConnectorClusterList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/List"
          },
          {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ConnectorCluster"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ConnectorClusterMeta": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectMeta"
          },
          {
            "$ref": "#/components/schemas/ConnectorClusterRequestMeta"
          }
        ]
      },
      "ConnectorClusterRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorClusterRequestMeta"
          }
        ],
        "description": "Schema for the request to update a data plane cluster's name"
      },
      "ConnectorClusterRequestMeta": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/ConnectorResourceAnnotations"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConnectorClusterState": {
        "enum": [
          "disconnected",
          "ready",
          "deleting"
        ],
        "type": "string"
      },
      "ConnectorClusterStatus": {
        "properties": {
          "status": {
            "properties": {
              "error": {
                "type": "string"
              },
              "state": {
                "$ref": "#/components/schemas/ConnectorClusterState"
              }
            },
            "type": "object"
          }
        }
      },
      "ConnectorConfiguration": {
        "properties": {
          "connector": {
            "type": "object"
          },
          "kafka": {
            "$ref": "#/components/schemas/KafkaConnectionSettings"
          },
          "schema_registry": {
            "$ref": "#/components/schemas/SchemaRegistryConnectionSettings"
          },
          "service_account": {
            "$ref": "#/components/schemas/ServiceAccount"
          }
        },
        "required": [
          "kafka",
          "service_account",
          "connector"
        ]
      },
      "ConnectorDesiredState": {
        "enum": [
          "unassigned",
          "ready",
          "stopped",
          "deleted"
        ],
        "type": "string"
      },
      "ConnectorList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/List"
          },
          {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/Connector"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ConnectorMeta": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectMeta"
          },
          {
            "$ref": "#/components/schemas/ConnectorRequestMeta"
          },
          {
            "properties": {
              "resource_version": {
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "ConnectorNamespace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "$ref": "#/components/schemas/ConnectorNamespaceMeta"
          },
          {
            "properties": {
              "cluster_id": {
                "type": "string"
              },
              "expiration": {
                "description": "Namespace expiration timestamp in RFC 3339 format",
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/ConnectorNamespaceStatus"
              },
              "tenant": {
                "$ref": "#/components/schemas/ConnectorNamespaceTenant"
              }
            },
            "required": [
              "id",
              "name",
              "resource_version",
              "cluster_id",
              "tenant",
              "status"
            ],
            "type": "object"
          }
        ],
        "description": "A connector namespace"
      },
      "ConnectorNamespaceEvalRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorNamespaceRequestMeta"
          }
        ],
        "description": "An evaluation connector namespace create request"
      },
      "ConnectorNamespaceList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/List"
          },
          {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ConnectorNamespace"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ConnectorNamespaceMeta": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectMeta"
          },
          {
            "$ref": "#/components/schemas/ConnectorNamespaceRequestMeta"
          },
          {
            "properties": {
              "quota": {
                "$ref": "#/components/schemas/ConnectorNamespaceQuota"
              },
              "resource_version": {
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "ConnectorNamespacePatchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorNamespaceRequestMeta"
          },
          {
            "type": "object"
          }
        ],
        "description": "A connector namespace patch request"
      },
      "ConnectorNamespaceQuota": {
        "properties": {
          "connectors": {
            "format": "int32",
            "type": "integer"
          },
          "cpu_limits": {
            "$ref": "#/components/schemas/CpuQuota"
          },
          "cpu_requests": {
            "$ref": "#/components/schemas/CpuQuota"
          },
          "memory_limits": {
            "$ref": "#/components/schemas/MemoryQuota"
          },
          "memory_requests": {
            "$ref": "#/components/schemas/MemoryQuota"
          }
        },
        "type": "object"
      },
      "ConnectorNamespaceRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorNamespaceRequestMeta"
          },
          {
            "properties": {
              "cluster_id": {
                "type": "string"
              },
              "kind": {
                "$ref": "#/components/schemas/ConnectorNamespaceTenantKind"
              }
            },
            "type": "object"
          }
        ],
        "description": "A connector namespace create request",
        "required": [
          "name",
          "cluster_id",
          "kind"
        ]
      },
      "ConnectorNamespaceRequestMeta": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/ConnectorResourceAnnotations"
          },
          "name": {
            "description": "Namespace name must match pattern `^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$`, or it may be empty to be auto-generated.",
            "pattern": "^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConnectorNamespaceState": {
        "enum": [
          "disconnected",
          "ready",
          "deleting",
          "deleted"
        ],
        "type": "string"
      },
      "ConnectorNamespaceStatus": {
        "properties": {
          "connectors_deployed": {
            "format": "int32",
            "type": "integer"
          },
          "error": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ConnectorNamespaceState"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "state",
          "connectors_deployed"
        ],
        "type": "object"
      },
      "ConnectorNamespaceTenant": {
        "properties": {
          "id": {
            "description": "Either user or organisation id depending on the value of kind",
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/ConnectorNamespaceTenantKind"
          }
        },
        "required": [
          "kind",
          "id"
        ],
        "type": "object"
      },
      "ConnectorNamespaceTenantKind": {
        "enum": [
          "user",
          "organisation"
        ],
        "type": "string"
      },
      "ConnectorRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorRequestMeta"
          },
          {
            "$ref": "#/components/schemas/ConnectorConfiguration"
          }
        ]
      },
      "ConnectorRequestMeta": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/ConnectorResourceAnnotations"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "connector_type_id": {
            "type": "string"
          },
          "desired_state": {
            "$ref": "#/components/schemas/ConnectorDesiredState"
          },
          "name": {
            "type": "string"
          },
          "namespace_id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "connector_type_id",
          "namespace_id",
          "desired_state"
        ],
        "type": "object"
      },
      "ConnectorResourceAnnotations": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Name-value string annotations for resource",
        "type": "object"
      },
      "ConnectorState": {
        "enum": [
          "assigning",
          "assigned",
          "updating",
          "ready",
          "stopped",
          "failed",
          "deleting",
          "deleted",
          "provisioning",
          "deprovisioning"
        ],
        "type": "string"
      },
      "ConnectorStatus": {
        "properties": {
          "status": {
            "properties": {
              "error": {
                "type": "string"
              },
              "state": {
                "$ref": "#/components/schemas/ConnectorState"
              }
            },
            "type": "object"
          }
        }
      },
      "ConnectorType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "properties": {
              "annotations": {
                "$ref": "#/components/schemas/ConnectorResourceAnnotations"
              },
              "capabilities": {
                "description": "The capabilities supported by the connector",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "channels": {
                "description": "Channels of the connector type.",
                "items": {
                  "$ref": "#/components/schemas/Channel"
                },
                "type": "array"
              },
              "deprecated": {
                "description": "Connector type is deprecated and removed from the catalog.",
                "type": "boolean"
              },
              "description": {
                "description": "A description of the connector.",
                "type": "string"
              },
              "featured_rank": {
                "description": "Ranking for featured connectors",
                "format": "int32",
                "type": "integer"
              },
              "icon_href": {
                "description": "URL to an icon of the connector.",
                "type": "string"
              },
              "labels": {
                "description": "Labels used to categorize the connector",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "description": "Name of the connector type.",
                "type": "string"
              },
              "schema": {
                "description": "A json schema that can be used to validate a ConnectorRequest connector field.",
                "type": "object"
              },
              "version": {
                "description": "Version of the connector type.",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "Represents a connector type supported by the API",
        "required": [
          "name",
          "version",
          "schema"
        ]
      },
      "ConnectorTypeLabelCount": {
        "description": "Represents a connector type label and the number of types with that label",
        "properties": {
          "count": {
            "description": "Number of connector types with this label.",
            "format": "int32",
            "type": "integer"
          },
          "label": {
            "description": "Name of the connector type label.",
            "type": "string"
          }
        },
        "required": [
          "label",
          "count"
        ],
        "type": "object"
      },
      "ConnectorTypeLabelCountList": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ConnectorTypeLabelCount"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ConnectorTypeList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/List"
          },
          {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ConnectorType"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "CpuQuota": {
        "description": "CPU quota for limits or requests",
        "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$",
        "type": "string"
      },
      "Error": {
        "nullable": true,
        "properties": {
          "code": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "operation_id": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "kind",
          "href",
          "code",
          "reason"
        ],
        "type": "object"
      },
      "KafkaConnectionSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceConnectionSettings"
          }
        ],
        "description": "Holds the configuration to connect to a Kafka Instance."
      },
      "List": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ObjectReference"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          },
          "page": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "kind",
          "page",
          "size",
          "total",
          "items"
        ],
        "type": "object"
      },
      "MemoryQuota": {
        "description": "Memory quota for limits or requests",
        "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$",
        "type": "string"
      },
      "ObjectMeta": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "modified_at": {
            "format": "date-time",
            "type": "string"
          },
          "owner": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ObjectReference": {
        "properties": {
          "href": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SchemaRegistryConnectionSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceConnectionSettings"
          }
        ],
        "description": "Holds the configuration to connect to a Schem Registry Instance."
      },
      "ServiceAccount": {
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          }
        },
        "required": [
          "client_id",
          "client_secret"
        ]
      },
      "ServiceConnectionSettings": {
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "url"
        ]
      },
      "VersionMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "example": {
              "collections": [
                {
                  "href": "/api/connector_mgmt/v1/kafka_connectors",
                  "id": "kafkas",
                  "kind": "ConnectorList"
                }
              ],
              "href": "/api/connector_mgmt/v1",
              "id": "v1",
              "kind": "APIVersion"
            },
            "properties": {
              "collections": {
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ObjectReference"
                    }
                  ]
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "email": "rhosak-support@redhat.com",
      "name": "Red Hat OpenShift Streams for Apache Kafka Support"
    },
    "description": "Connector Management API is a REST API to manage connectors.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "title": "Connector Management API",
    "version": "0.1.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/connector_mgmt/v1": {
      "get": {
        "description": "Returns the version metadata",
        "operationId": "getVersionMetadata",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionMetadata"
                }
              }
            },
            "description": "Version metadata"
          }
        },
        "summary": "Returns the version metadata",
        "tags": [
          "Connector Service"
        ]
      }
    },
    "/api/connector_mgmt/v1/kafka_connector_clusters": {
      "get": {
        "description": "Returns a list of connector clusters",
        "operationId": "listConnectorClusters",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorClusterList"
                }
              }
            },
            "description": "A list of connector clusters"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Returns a list of connector clusters",
        "tags": [
          "Connector Clusters"
        ]
      },
      "post": {
        "description": "Create a new connector cluster",
        "operationId": "createConnectorCluster",
        "parameters": [
          {
            "description": "Perform the action in an asynchronous manner",
            "in": "query",
            "name": "async",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "ConnectorClusterCreateExample": {
                  "$ref": "#/components/examples/ConnectorClusterCreateExample"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ConnectorClusterRequest"
              }
            }
          },
          "description": "Connector cluster data",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorCluster"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "400CreationExample": {
                    "$ref": "#/components/examples/400CreationExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The requested resource doesn't exist"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "An unexpected error occurred creating the connector cluster"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create a new connector cluster",
        "tags": [
          "Connector Clusters"
        ]
      }
    },
    "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}": {
      "delete": {
        "description": "Delete a connector cluster",
        "operationId": "deleteConnectorCluster",
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Deleted"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404DeleteExample": {
                    "$ref": "#/components/examples/404DeleteExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No resource with specified ID exists"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500DeleteExample": {
                    "$ref": "#/components/examples/500DeleteExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Delete a connector cluster",
        "tags": [
          "Connector Clusters"
        ]
      },
      "get": {
        "description": "Get a connector cluster",
        "operationId": "getConnectorCluster",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorCluster"
                }
              }
            },
            "description": "The connector cluster matching the request"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No matching connector cluster type exists"
          },
          "410": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/410Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The requested resource doesn't exist anymore"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get a connector cluster",
        "tags": [
          "Connector Clusters"
        ]
      },
      "parameters": [
        {
          "description": "The id of the connector cluster",
          "in": "path",
          "name": "connector_cluster_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "udpate a connector cluster",
        "operationId": "updateConnectorClusterById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorClusterRequest"
              }
            }
          },
          "description": "Data to updated connector with",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Cluster status is updated"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No matching connector cluster exists"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "udpate a connector cluster",
        "tags": [
          "Connector Clusters"
        ]
      }
    },
    "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}/addon_parameters": {
      "get": {
        "description": "Get a connector cluster's addon parameters",
        "operationId": "getConnectorClusterAddonParameters",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonParameterList"
                }
              }
            },
            "description": "The parameters that should be used to configure the managed connector addon on the cluster."
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No matching connector cluster type exists"
          },
          "410": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/410Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The requested resource doesn't exist anymore"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get a connector cluster's addon parameters",
        "tags": [
          "Connector Clusters"
        ]
      },
      "parameters": [
        {
          "description": "The id of the connector cluster",
          "in": "path",
          "name": "connector_cluster_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "Resets cluster service account credentials when true",
          "in": "query",
          "name": "reset_credentials",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        }
      ]
    },
    "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}/namespaces": {
      "get": {
        "description": "Get a connector cluster's namespaces",
        "operationId": "getConnectorClusterNamespaces",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorNamespaceList"
                }
              }
            },
            "description": "The namespaces visible to user in the cluster."
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No matching connector cluster type exists"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get a connector cluster's namespaces",
        "tags": [
          "Connector Clusters"
        ]
      },
      "parameters": [
        {
          "description": "The id of the connector cluster",
          "in": "path",
          "name": "connector_cluster_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/page"
        },
        {
          "$ref": "#/components/parameters/size"
        },
        {
          "$ref": "#/components/parameters/orderBy"
        },
        {
          "$ref": "#/components/parameters/search"
        }
      ]
    },
    "/api/connector_mgmt/v1/kafka_connector_namespaces": {
      "get": {
        "description": "Returns a list of connector namespaces",
        "operationId": "listConnectorNamespaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorNamespaceList"
                }
              }
            },
            "description": "A list of connector namespaces"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Returns a list of connector namespaces",
        "tags": [
          "Connector Namespaces"
        ]
      }
    },
    "/api/connector_mgmt/v1/kafka_connector_namespaces/eval": {
      "post": {
        "description": "Create a new evaluation connector namespace",
        "operationId": "createEvaluationNamespace",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "ConnectorNamespaceEvalCreateExample": {
                  "$ref": "#/components/examples/ConnectorNamespaceEvalCreateExample"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ConnectorNamespaceEvalRequest"
              }
            }
          },
          "description": "Connector namespace data",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorNamespace"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "400CreationExample": {
                    "$ref": "#/components/examples/400CreationExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The requested resource doesn't exist"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "An unexpected error occurred creating the connector namespace"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create a new short lived evaluation connector namespace",
        "tags": [
          "Connector Namespaces"
        ]
      }
    },
    "/api/connector_mgmt/v1/kafka_connector_namespaces/{connector_namespace_id}": {
      "get": {
        "description": "Get a connector namespace",
        "operationId": "getConnectorNamespace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorNamespace"
                }
              }
            },
            "description": "The connector namespace matching the request"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No matching connector namespace type exists"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get a connector namespace",
        "tags": [
          "Connector Namespaces"
        ]
      },
      "parameters": [
        {
          "description": "The id of the connector namespace",
          "in": "path",
          "name": "connector_namespace_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/connector_mgmt/v1/kafka_connector_types": {
      "get": {
        "description": "Returns a list of connector types",
        "operationId": "getConnectorTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorTypeList"
                }
              }
            },
            "description": "A list of connector types"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Returns a list of connector types",
        "tags": [
          "Connector Types"
        ]
      }
    },
    "/api/connector_mgmt/v1/kafka_connector_types/labels": {
      "get": {
        "description": "Returns a list of connector type labels",
        "operationId": "getConnectorTypeLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorTypeLabelCountList"
                }
              }
            },
            "description": "A list of connector type labels"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Returns a list of connector type labels",
        "tags": [
          "Connector Types"
        ]
      }
    },
    "/api/connector_mgmt/v1/kafka_connector_types/{connector_type_id}": {
      "get": {
        "description": "Get a connector type by id",
        "operationId": "getConnectorTypeByID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "ConnectorTypeExample": {
                    "$ref": "#/components/examples/ConnectorTypeExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ConnectorType"
                }
              }
            },
            "description": "The connector type matching the request"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No matching connector type exists"
          },
          "410": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/410Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Connector type doesn't exist anymore"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get a connector type by id",
        "tags": [
          "Connector Types"
        ]
      },
      "parameters": [
        {
          "description": "The id of the connector type",
          "in": "path",
          "name": "connector_type_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/connector_mgmt/v1/kafka_connectors": {
      "get": {
        "description": "Returns a list of connector types",
        "operationId": "listConnectors",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorList"
                }
              }
            },
            "description": "A list of connectors"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Returns a list of connector types",
        "tags": [
          "Connectors"
        ]
      },
      "post": {
        "description": "Create a new connector",
        "operationId": "createConnector",
        "parameters": [
          {
            "description": "Perform the action in an asynchronous manner",
            "in": "query",
            "name": "async",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "ConnectorCreateExample": {
                  "$ref": "#/components/examples/ConnectorCreateExample"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ConnectorRequest"
              }
            }
          },
          "description": "Connector data",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "400CreationExample": {
                    "$ref": "#/components/examples/400CreationExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The requested resource doesn't exist"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "An unexpected error occurred creating the connector"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create a new connector",
        "tags": [
          "Connectors"
        ]
      }
    },
    "/api/connector_mgmt/v1/kafka_connectors/{id}": {
      "delete": {
        "description": "Delete a connector",
        "operationId": "deleteConnector",
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Deleted"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404DeleteExample": {
                    "$ref": "#/components/examples/404DeleteExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No kafka request with specified ID exists"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500DeleteExample": {
                    "$ref": "#/components/examples/500DeleteExample"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Delete a connector",
        "tags": [
          "Connectors"
        ]
      },
      "get": {
        "description": "Get a connector",
        "operationId": "getConnector",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            },
            "description": "The connector matching the request"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No matching connector exists"
          },
          "410": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/410Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The requested resource doesn't exist anymore"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get a connector",
        "tags": [
          "Connectors"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "patch": {
        "description": "Patch a connector",
        "operationId": "patchConnector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorRequest"
              }
            },
            "application/json-patch+json": {
              "schema": {
                "description": "A JSON Patch, RFC 6902 - https://tools.ietf.org/html/rfc6902",
                "type": "object"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "Data to patch the connector with",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            },
            "description": "The connector matching the request"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No matching resource exists"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/409Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "An attempt was made to modify an immutable field"
          },
          "410": {
            "content": {
              "application/json": {
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/410Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The requested resource doesn't exist anymore"
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Patch a connector",
        "tags": [
          "Connectors"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "Main (production) server",
      "url": "https://api.openshift.com"
    },
    {
      "description": "Staging server",
      "url": "https://api.stage.openshift.com"
    },
    {
      "description": "localhost",
      "url": "http://localhost:8000"
    },
    {
      "description": "current domain",
      "url": "/"
    }
  ],
  "tags": [
    {
      "description": "",
      "name": "Connector Types"
    },
    {
      "description": "",
      "name": "Connectors"
    },
    {
      "description": "",
      "name": "Connector Clusters"
    },
    {
      "description": "",
      "name": "Connector Service"
    },
    {
      "description": "",
      "name": "Connector Namespaces"
    }
  ]
}